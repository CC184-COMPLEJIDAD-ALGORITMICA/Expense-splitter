{
  "version": 3,
  "sources": ["../../../app/routes/optimizacion-divisas.tsx", "../../../app/types/currencies.ts"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app\\\\\\\\routes\\\\\\\\optimizacion-divisas.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app\\\\routes\\\\optimizacion-divisas.tsx\");\n  import.meta.hot.lastModified = \"1726797788719.1323\";\n}\n// REMIX HMR END\n\nimport { useState, useEffect } from 'react';\nimport { Form, useActionData, useSubmit, useLoaderData } from '@remix-run/react';\nimport { json } from '@remix-run/node';\nimport { floydWarshallAlgorithm } from '../utils/floydWarshallAlgorithm';\nimport { exportToExcel } from '../utils/excelExport';\nimport { currencieslist } from '~/types/currencies';\nimport { getDollarValue } from '../utils/currencyUtils';\nexport const loader = async () => {\n  const dollarValue = await getDollarValue();\n  return json({\n    dollarValue\n  });\n};\nexport const action = async ({\n  request\n}) => {\n  const formData = await request.formData();\n  const exchangeRates = JSON.parse(formData.get('exchangeRates'));\n  const result = floydWarshallAlgorithm(exchangeRates);\n  return json({\n    result\n  });\n};\nexport default function OptimizacionDivisas() {\n  _s();\n  const actionData = useActionData();\n  const loaderData = useLoaderData();\n  const submit = useSubmit();\n  const [currencies, setCurrencies] = useState(currencieslist);\n  const [exchangeRates, setExchangeRates] = useState([]);\n  const [showTutorial, setShowTutorial] = useState(false);\n  useEffect(() => {\n    // Initialize exchange rates with USD as base\n    const initialRates = currencies.map(currency => ({\n      from: 'USD',\n      to: currency.code,\n      rate: currency.code === 'USD' ? 1 : 0\n    }));\n    setExchangeRates(initialRates);\n  }, []);\n  const handleSubmit = event => {\n    event.preventDefault();\n    submit({\n      exchangeRates: JSON.stringify(exchangeRates)\n    }, {\n      method: 'post'\n    });\n  };\n  const handleExchangeRateChange = (index, value) => {\n    const newRates = [...exchangeRates];\n    newRates[index].rate = parseFloat(value);\n    setExchangeRates(newRates);\n  };\n  const handleExport = () => {\n    if (actionData?.result) {\n      exportToExcel(actionData.result, 'Optimizacion_Divisas');\n    }\n  };\n  return <div className=\"container mx-auto p-4\">\r\n      <h1 className=\"text-2xl font-bold mb-4\">Optimizaci\u00F3n de Rutas de Conversi\u00F3n de Divisas</h1>\r\n      <p className=\"mb-4\">Valor actual del d\u00F3lar: {loaderData.dollarValue}</p>\r\n      \r\n      <button onClick={() => setShowTutorial(!showTutorial)} className=\"mb-4 p-2 bg-blue-500 text-white rounded\">\r\n        {showTutorial ? 'Ocultar Tutorial' : 'Mostrar Tutorial'}\r\n      </button>\r\n\r\n      {showTutorial && <div className=\"mb-6 p-4 bg-gray-100 rounded\">\r\n          <h2 className=\"text-xl font-bold mb-2\">Tutorial y Ejemplos</h2>\r\n          <p>El algoritmo de Floyd-Warshall se utiliza para encontrar las rutas m\u00E1s eficientes de conversi\u00F3n entre divisas. Esto es \u00FAtil en varios escenarios reales:</p>\r\n          <ul className=\"list-disc list-inside mb-2\">\r\n            <li>Comercio internacional: Optimizar costos de conversi\u00F3n en transacciones multinacionales.</li>\r\n            <li>Arbitraje de divisas: Identificar oportunidades de beneficio en el mercado FOREX.</li>\r\n            <li>Gesti\u00F3n de tesorer\u00EDa: Minimizar p\u00E9rdidas en conversiones para empresas multinacionales.</li>\r\n          </ul>\r\n          <p>El algoritmo funciona construyendo una matriz de todas las posibles conversiones y encontrando el camino m\u00E1s corto (o en este caso, la conversi\u00F3n m\u00E1s favorable) entre cada par de divisas.</p>\r\n          <p>Es ideal porque:</p>\r\n          <ul className=\"list-disc list-inside\">\r\n            <li>Considera todas las posibles rutas de conversi\u00F3n indirectas.</li>\r\n            <li>Tiene una complejidad de O(n\u00B3), eficiente para un n\u00FAmero moderado de divisas.</li>\r\n            <li>Proporciona resultados para todas las parejas de divisas en una sola ejecuci\u00F3n.</li>\r\n          </ul>\r\n        </div>}\r\n\r\n      <Form method=\"post\" onSubmit={handleSubmit}>\r\n        {exchangeRates.map((rate, index) => <div key={index} className=\"mb-2\">\r\n            <span className=\"mr-2\">{rate.from} a {rate.to}:</span>\r\n            <input type=\"number\" step=\"0.0001\" value={rate.rate} onChange={e => handleExchangeRateChange(index, e.target.value)} className=\"p-1 border rounded\" />\r\n          </div>)}\r\n        <button type=\"submit\" className=\"mt-4 p-2 bg-green-500 text-white rounded\">\r\n          Calcular Rutas \u00D3ptimas\r\n        </button>\r\n      </Form>\r\n\r\n      {actionData?.result && <div className=\"mt-4\">\r\n          <h2 className=\"text-xl font-bold mb-2\">Resultados</h2>\r\n          <div className=\"overflow-x-auto\">\r\n            <table className=\"min-w-full bg-white\">\r\n              <thead>\r\n                <tr>\r\n                  <th className=\"px-4 py-2\">Desde</th>\r\n                  <th className=\"px-4 py-2\">Hasta</th>\r\n                  <th className=\"px-4 py-2\">Tasa</th>\r\n                  <th className=\"px-4 py-2\">Ruta</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {actionData.result.map((item, index) => <tr key={index} className={index % 2 === 0 ? 'bg-gray-100' : ''}>\r\n                    <td className=\"border px-4 py-2\">{item.from}</td>\r\n                    <td className=\"border px-4 py-2\">{item.to}</td>\r\n                    <td className=\"border px-4 py-2\">{item.rate.toFixed(4)}</td>\r\n                    <td className=\"border px-4 py-2\">{item.path.join(' \u2192 ')}</td>\r\n                  </tr>)}\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n          <button onClick={handleExport} className=\"mt-4 p-2 bg-yellow-500 text-white rounded\">\r\n            Exportar a Excel\r\n          </button>\r\n        </div>}\r\n    </div>;\n}\n_s(OptimizacionDivisas, \"1+CcnKULLIfALK1xzI/aLjHYNVs=\", false, function () {\n  return [useActionData, useLoaderData, useSubmit];\n});\n_c = OptimizacionDivisas;\nvar _c;\n$RefreshReg$(_c, \"OptimizacionDivisas\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;", "// REMIX HMR BEGIN\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\nimport.meta.hot = __hmr__.createHotContext(\n//@ts-expect-error\n\"app\\\\types\\\\currencies.ts\"\n);\nimport.meta.hot.lastModified = \"1726795676055.0488\";\n}\n// REMIX HMR END\n\nexport const   currencieslist = [\r\n    { code: 'USD', name: 'US Dollar' },\r\n    { code: 'AED', name: 'United Arab Emirates Dirham' },\r\n    { code: 'AFN', name: 'Afghan Afghani' },\r\n    { code: 'ALL', name: 'Albanian Lek' },\r\n    { code: 'AMD', name: 'Armenian Dram' },\r\n    { code: 'ANG', name: 'Netherlands Antillean Guilder' },\r\n    { code: 'AOA', name: 'Angolan Kwanza' },\r\n    { code: 'ARS', name: 'Argentine Peso' },\r\n    { code: 'AUD', name: 'Australian Dollar' },\r\n    { code: 'AWG', name: 'Aruban Florin' },\r\n    { code: 'AZN', name: 'Azerbaijani Manat' },\r\n    { code: 'BAM', name: 'Bosnia and Herzegovina Convertible Mark' },\r\n    { code: 'BBD', name: 'Barbadian Dollar' },\r\n    { code: 'BDT', name: 'Bangladeshi Taka' },\r\n    { code: 'BGN', name: 'Bulgarian Lev' },\r\n    { code: 'BHD', name: 'Bahraini Dinar' },\r\n    { code: 'BIF', name: 'Burundian Franc' },\r\n    { code: 'BMD', name: 'Bermudian Dollar' },\r\n    { code: 'BND', name: 'Brunei Dollar' },\r\n    { code: 'BOB', name: 'Bolivian Boliviano' },\r\n    { code: 'BRL', name: 'Brazilian Real' },\r\n    { code: 'BSD', name: 'Bahamian Dollar' },\r\n    { code: 'BTN', name: 'Bhutanese Ngultrum' },\r\n    { code: 'BWP', name: 'Botswana Pula' },\r\n    { code: 'BYN', name: 'Belarusian Ruble' },\r\n    { code: 'BZD', name: 'Belize Dollar' },\r\n    { code: 'CAD', name: 'Canadian Dollar' },\r\n    { code: 'CDF', name: 'Congolese Franc' },\r\n    { code: 'CHF', name: 'Swiss Franc' },\r\n    { code: 'CLP', name: 'Chilean Peso' },\r\n    { code: 'CNY', name: 'Chinese Yuan' },\r\n    { code: 'COP', name: 'Colombian Peso' },\r\n    { code: 'CRC', name: 'Costa Rican Col\u00F3n' },\r\n    { code: 'CUP', name: 'Cuban Peso' },\r\n    { code: 'CVE', name: 'Cape Verdean Escudo' },\r\n    { code: 'CZK', name: 'Czech Koruna' },\r\n    { code: 'DJF', name: 'Djiboutian Franc' },\r\n    { code: 'DKK', name: 'Danish Krone' },\r\n    { code: 'DOP', name: 'Dominican Peso' },\r\n    { code: 'DZD', name: 'Algerian Dinar' },\r\n    { code: 'EGP', name: 'Egyptian Pound' },\r\n    { code: 'ERN', name: 'Eritrean Nakfa' },\r\n    { code: 'ETB', name: 'Ethiopian Birr' },\r\n    { code: 'EUR', name: 'Euro' },\r\n    { code: 'FJD', name: 'Fijian Dollar' },\r\n    { code: 'FKP', name: 'Falkland Islands Pound' },\r\n    { code: 'FOK', name: 'Faroese Kr\u00F3na' },\r\n    { code: 'GBP', name: 'British Pound Sterling' },\r\n    { code: 'GEL', name: 'Georgian Lari' },\r\n    { code: 'GGP', name: 'Guernsey Pound' },\r\n    { code: 'GHS', name: 'Ghanaian Cedi' },\r\n    { code: 'GIP', name: 'Gibraltar Pound' },\r\n    { code: 'GMD', name: 'Gambian Dalasi' },\r\n    { code: 'GNF', name: 'Guinean Franc' },\r\n    { code: 'GTQ', name: 'Guatemalan Quetzal' },\r\n    { code: 'GYD', name: 'Guyanese Dollar' },\r\n    { code: 'HKD', name: 'Hong Kong Dollar' },\r\n    { code: 'HNL', name: 'Honduran Lempira' },\r\n    { code: 'HRK', name: 'Croatian Kuna' },\r\n    { code: 'HTG', name: 'Haitian Gourde' },\r\n    { code: 'HUF', name: 'Hungarian Forint' },\r\n    { code: 'IDR', name: 'Indonesian Rupiah' },\r\n    { code: 'ILS', name: 'Israeli New Shekel' },\r\n    { code: 'IMP', name: 'Isle of Man Pound' },\r\n    { code: 'INR', name: 'Indian Rupee' },\r\n    { code: 'IQD', name: 'Iraqi Dinar' },\r\n    { code: 'IRR', name: 'Iranian Rial' },\r\n    { code: 'ISK', name: 'Icelandic Kr\u00F3na' },\r\n    { code: 'JEP', name: 'Jersey Pound' },\r\n    { code: 'JMD', name: 'Jamaican Dollar' },\r\n    { code: 'JOD', name: 'Jordanian Dinar' },\r\n    { code: 'JPY', name: 'Japanese Yen' },\r\n    { code: 'KES', name: 'Kenyan Shilling' },\r\n    { code: 'KGS', name: 'Kyrgystani Som' },\r\n    { code: 'KHR', name: 'Cambodian Riel' },\r\n    { code: 'KID', name: 'Kiribati Dollar' },\r\n    { code: 'KMF', name: 'Comorian Franc' },\r\n    { code: 'KRW', name: 'South Korean Won' },\r\n    { code: 'KWD', name: 'Kuwaiti Dinar' },\r\n    { code: 'KYD', name: 'Cayman Islands Dollar' },\r\n    { code: 'KZT', name: 'Kazakhstani Tenge' },\r\n    { code: 'LAK', name: 'Laotian Kip' },\r\n    { code: 'LBP', name: 'Lebanese Pound' },\r\n    { code: 'LKR', name: 'Sri Lankan Rupee' },\r\n    { code: 'LRD', name: 'Liberian Dollar' },\r\n    { code: 'LSL', name: 'Lesotho Loti' },\r\n    { code: 'LYD', name: 'Libyan Dinar' },\r\n    { code: 'MAD', name: 'Moroccan Dirham' },\r\n    { code: 'MDL', name: 'Moldovan Leu' },\r\n    { code: 'MGA', name: 'Malagasy Ariary' },\r\n    { code: 'MKD', name: 'Macedonian Denar' },\r\n    { code: 'MMK', name: 'Myanma Kyat' },\r\n    { code: 'MNT', name: 'Mongolian Tugrik' },\r\n    { code: 'MOP', name: 'Macanese Pataca' },\r\n    { code: 'MRU', name: 'Mauritanian Ouguiya' },\r\n    { code: 'MUR', name: 'Mauritian Rupee' },\r\n    { code: 'MVR', name: 'Maldivian Rufiyaa' },\r\n    { code: 'MWK', name: 'Malawian Kwacha' },\r\n    { code: 'MXN', name: 'Mexican Peso' },\r\n    { code: 'MYR', name: 'Malaysian Ringgit' },\r\n    { code: 'MZN', name: 'Mozambican Metical' },\r\n    { code: 'NAD', name: 'Namibian Dollar' },\r\n    { code: 'NGN', name: 'Nigerian Naira' },\r\n    { code: 'NIO', name: 'Nicaraguan C\u00F3rdoba' },\r\n    { code: 'NOK', name: 'Norwegian Krone' },\r\n    { code: 'NPR', name: 'Nepalese Rupee' },\r\n    { code: 'NZD', name: 'New Zealand Dollar' },\r\n    { code: 'OMR', name: 'Omani Rial' },\r\n    { code: 'PAB', name: 'Panamanian Balboa' },\r\n    { code: 'PEN', name: 'Peruvian Nuevo Sol' },\r\n    { code: 'PGK', name: 'Papua New Guinean Kina' },\r\n    { code: 'PHP', name: 'Philippine Peso' },\r\n    { code: 'PKR', name: 'Pakistani Rupee' },\r\n    { code: 'PLN', name: 'Polish Zloty' },\r\n    { code: 'PYG', name: 'Paraguayan Guarani' },\r\n    { code: 'QAR', name: 'Qatari Rial' },\r\n    { code: 'RON', name: 'Romanian Leu' },\r\n    { code: 'RSD', name: 'Serbian Dinar' },\r\n    { code: 'RUB', name: 'Russian Ruble' },\r\n    { code: 'RWF', name: 'Rwandan Franc' },\r\n    { code: 'SAR', name: 'Saudi Riyal' },\r\n    { code: 'SBD', name: 'Solomon Islands Dollar' },\r\n    { code: 'SCR', name: 'Seychellois Rupee' },\r\n    { code: 'SDG', name: 'Sudanese Pound' },\r\n    { code: 'SEK', name: 'Swedish Krona' },\r\n    { code: 'SGD', name: 'Singapore Dollar' },\r\n    { code: 'SHP', name: 'Saint Helena Pound' },\r\n    { code: 'SLE', name: 'Sierra Leonean Leone' },\r\n    { code: 'SLL', name: 'Sierra Leonean Leone' },\r\n    { code: 'SOS', name: 'Somali Shilling' },\r\n    { code: 'SRD', name: 'Surinamese Dollar' },\r\n    { code: 'SSP', name: 'South Sudanese Pound' },\r\n    { code: 'STN', name: 'S\u00E3o Tom\u00E9 and Pr\u00EDncipe Dobra' },\r\n    { code: 'SYP', name: 'Syrian Pound' },\r\n    { code: 'SZL', name: 'Swazi Lilangeni' },\r\n    { code: 'THB', name: 'Thai Baht' },\r\n    { code: 'TJS', name: 'Tajikistani Somoni' },\r\n    { code: 'TMT', name: 'Turkmenistani Manat' },\r\n    { code: 'TND', name: 'Tunisian Dinar' },\r\n    { code: 'TOP', name: 'Tongan Pa\u02BBanga' },\r\n    { code: 'TRY', name: 'Turkish Lira' },\r\n    { code: 'TTD', name: 'Trinidad and Tobago Dollar' },\r\n    { code: 'TVD', name: 'Tuvaluan Dollar' },\r\n    { code: 'TWD', name: 'New Taiwan Dollar' },\r\n    { code: 'TZS', name: 'Tanzanian Shilling' },\r\n    { code: 'UAH', name: 'Ukrainian Hryvnia' },\r\n    { code: 'UGX', name: 'Ugandan Shilling' },\r\n    { code: 'UYU', name: 'Uruguayan Peso' },\r\n    { code: 'UZS', name: 'Uzbekistani Som' },\r\n    { code: 'VES', name: 'Venezuelan Bol\u00EDvar Soberano' },\r\n    { code: 'VND', name: 'Vietnamese Dong' },\r\n    { code: 'VUV', name: 'Vanuatu Vatu' },\r\n    { code: 'WST', name: 'Samoan Tala' },\r\n    { code: 'XAF', name: 'Central African CFA Franc' },\r\n    { code: 'XCD', name: 'East Caribbean Dollar' },\r\n    { code: 'XDR', name: 'Special Drawing Rights' },\r\n    { code: 'XOF', name: 'West African CFA Franc' },\r\n    { code: 'XPF', name: 'CFP Franc' },\r\n    { code: 'YER', name: 'Yemeni Rial' },\r\n    { code: 'ZAR', name: 'South African Rand' },\r\n    { code: 'ZMW', name: 'Zambian Kwacha' },\r\n    { code: 'ZWL', name: 'Zimbabwean Dollar' }\r\n  ];"],
  "mappings": "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",
  "names": []
}
