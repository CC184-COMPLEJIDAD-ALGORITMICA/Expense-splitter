{
  "version": 3,
  "sources": ["empty-module:~/server/kruskalMST.server", "../../../app/routes/optimizacion-global.tsx"],
  "sourcesContent": ["module.exports = {};", "// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app\\\\\\\\routes\\\\\\\\optimizacion-global.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app\\\\routes\\\\optimizacion-global.tsx\");\n  import.meta.hot.lastModified = \"1727059936235.157\";\n}\n// REMIX HMR END\n\nimport { useState, useEffect } from 'react';\nimport { useLoaderData, useFetcher } from '@remix-run/react';\nimport { json } from '@remix-run/node';\nimport { executeKruskalMST } from '~/server/kruskalMST.server';\nimport { BACKUP_EXCHANGE_RATES } from '~/utils/backupExchangeRates';\nexport const loader = async () => {\n  return json({\n    exchangeRates: BACKUP_EXCHANGE_RATES.conversion_rates\n  });\n};\nexport const action = async ({\n  request\n}) => {\n  const formData = await request.formData();\n  const nodes = JSON.parse(formData.get('nodes'));\n  const exchangeHouses = JSON.parse(formData.get('exchangeHouses'));\n  const balanceOption = JSON.parse(formData.get('balanceOption'));\n  try {\n    const result = await executeKruskalMST(nodes, exchangeHouses, balanceOption);\n    return json(result);\n  } catch (error) {\n    console.error('Error optimizing transactions:', error);\n    return json({\n      error: 'Error optimizing transactions'\n    }, {\n      status: 500\n    });\n  }\n};\nexport default function OptimizacionGlobal() {\n  _s();\n  const {\n    exchangeRates\n  } = useLoaderData();\n  const [nodes, setNodes] = useState([]);\n  const [exchangeHouses, setExchangeHouses] = useState([]);\n  const [optimizedTransactions, setOptimizedTransactions] = useState([]);\n  const [newNodeName, setNewNodeName] = useState('');\n  const [newNodeBalance, setNewNodeBalance] = useState('');\n  const [newNodeCurrency, setNewNodeCurrency] = useState('USD');\n  const fetcher = useFetcher();\n  const [updatedNodes, setUpdatedNodes] = useState([]);\n  const [balanceOption, setBalanceOption] = useState({\n    type: 'equalize'\n  });\n  const [algorithmLogs, setAlgorithmLogs] = useState([]);\n  const generateRandomNodes = count => {\n    const companyNames = ['Acme Corp', 'Globex', 'Initech', 'Umbrella Corp', 'Stark Industries', 'Wayne Enterprises'];\n    const currencies = Object.keys(exchangeRates);\n    const newNodes = Array.from({\n      length: count\n    }, () => ({\n      id: Math.random().toString(36).substr(2, 9),\n      name: companyNames[Math.floor(Math.random() * companyNames.length)] + ' ' + Math.random().toString(36).substring(7),\n      balance: Math.random() * 10000,\n      // Balance between 0 and 10000\n      currency: currencies[Math.floor(Math.random() * currencies.length)]\n    }));\n    setNodes([...nodes, ...newNodes]);\n  };\n  const addNode = e => {\n    e.preventDefault();\n    const dollarBalance = parseFloat(newNodeBalance) / exchangeRates[newNodeCurrency];\n    setNodes([...nodes, {\n      id: Math.random().toString(36).substr(2, 9),\n      name: newNodeName,\n      balance: Math.max(0, dollarBalance),\n      // Ensure balance is not negative\n      currency: newNodeCurrency\n    }]);\n    setNewNodeName('');\n    setNewNodeBalance('');\n    setNewNodeCurrency('USD');\n  };\n  const deleteNode = id => {\n    setNodes(nodes.filter(node => node.id !== id));\n  };\n  const deleteAllNodes = () => {\n    setNodes([]);\n  };\n  const optimizeTransactions = () => {\n    fetcher.submit({\n      nodes: JSON.stringify(nodes),\n      exchangeHouses: JSON.stringify(exchangeHouses),\n      balanceOption: JSON.stringify(balanceOption)\n    }, {\n      method: 'post'\n    });\n  };\n  useEffect(() => {\n    if (fetcher.data && !fetcher.data.error) {\n      setOptimizedTransactions(fetcher.data.mst);\n      setUpdatedNodes(fetcher.data.updatedNodes);\n      setAlgorithmLogs(fetcher.data.logs);\n    }\n  }, [fetcher.data]);\n  return <div className=\"max-w-4xl mx-auto p-6\">\r\n      <h1 className=\"text-3xl font-bold mb-6 text-center text-blue-600\">Optimizaci\u00F3n Global de Transacciones</h1>\r\n      <p className=\"text-lg mb-8 text-center text-gray-600\">\r\n        Esta herramienta te ayuda a optimizar las transferencias entre cuentas en diferentes monedas para minimizar los costos de transacci\u00F3n.\r\n      </p>\r\n      \r\n      <div className=\"bg-white shadow-md rounded-lg p-6 mb-8\">\r\n        <h2 className=\"text-xl font-semibold mb-4\">Generar o Importar Nodos</h2>\r\n        <button onClick={() => generateRandomNodes(5)} className=\"bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded transition duration-300 mr-4\">\r\n          Generar 5 Nodos Aleatorios\r\n        </button>\r\n        <button onClick={deleteAllNodes} className=\"bg-red-500 hover:bg-red-600 text-white font-bold py-2 px-4 rounded transition duration-300\">\r\n          Borrar Todos los Nodos\r\n        </button>\r\n        <form onSubmit={addNode} className=\"mt-4\">\r\n          <input type=\"text\" value={newNodeName} onChange={e => setNewNodeName(e.target.value)} placeholder=\"Nombre del nodo\" className=\"border p-2 mr-2\" required />\r\n          <input type=\"number\" value={newNodeBalance} onChange={e => setNewNodeBalance(e.target.value)} placeholder=\"Balance\" className=\"border p-2 mr-2\" required />\r\n          <select value={newNodeCurrency} onChange={e => setNewNodeCurrency(e.target.value)} className=\"border p-2 mr-2\">\r\n            {Object.keys(exchangeRates).map(currency => <option key={currency} value={currency}>{currency}</option>)}\r\n          </select>\r\n          <button type=\"submit\" className=\"bg-green-500 hover:bg-green-600 text-white font-bold py-2 px-4 rounded transition duration-300\">\r\n            A\u00F1adir Nodo\r\n          </button>\r\n        </form>\r\n      </div>\r\n\r\n      {nodes.length > 0 && <div className=\"bg-white shadow-md rounded-lg p-6 mb-8\">\r\n          <h2 className=\"text-xl font-semibold mb-4\">Nodos Actuales</h2>\r\n          <ul className=\"space-y-2\">\r\n            {nodes.map(node => <li key={node.id} className=\"flex justify-between items-center border-b pb-2\">\r\n                <span className=\"font-medium\">{node.name}</span>\r\n                <span>\r\n                  <span className=\"text-green-600\">{node.balance.toFixed(2)} USD</span>\r\n                  <span className=\"text-gray-500 ml-2\">\r\n                    (Original: {(node.balance * exchangeRates[node.currency]).toFixed(2)} {node.currency})\r\n                  </span>\r\n                  <button onClick={() => deleteNode(node.id)} className=\"ml-2 text-red-500 hover:text-red-600\">\r\n                    Borrar\r\n                  </button>\r\n                </span>\r\n              </li>)}\r\n          </ul>\r\n        </div>}\r\n\r\n      <div className=\"bg-white shadow-md rounded-lg p-6 mb-8\">\r\n        <h2 className=\"text-xl font-semibold mb-4\">Opciones de Balance</h2>\r\n        <div className=\"flex items-center mb-4\">\r\n          <input type=\"radio\" id=\"equalize\" name=\"balanceOption\" checked={balanceOption.type === 'equalize'} onChange={() => setBalanceOption({\n          type: 'equalize'\n        })} className=\"mr-2\" />\r\n          <label htmlFor=\"equalize\">Equilibrar todas las cuentas</label>\r\n        </div>\r\n        <div className=\"flex items-center mb-4\">\r\n          <input type=\"radio\" id=\"empty\" name=\"balanceOption\" checked={balanceOption.type === 'empty'} onChange={() => setBalanceOption({\n          type: 'empty',\n          targetAccount: nodes[0]?.name\n        })} className=\"mr-2\" />\r\n          <label htmlFor=\"empty\">Vaciar una cuenta y repartir entre las dem\u00E1s</label>\r\n        </div>\r\n        {balanceOption.type === 'empty' && <select value={balanceOption.targetAccount} onChange={e => setBalanceOption({\n        ...balanceOption,\n        targetAccount: e.target.value\n      })} className=\"border p-2 mb-4\">\r\n            {nodes.map(node => <option key={node.id} value={node.name}>{node.name}</option>)}\r\n          </select>}\r\n      </div>\r\n\r\n      {nodes.length > 1 && <div className=\"text-center mb-8\">\r\n          <button onClick={optimizeTransactions} className=\"bg-green-500 hover:bg-green-600 text-white font-bold py-3 px-6 rounded-full transition duration-300 transform hover:scale-105\">\r\n            Optimizar Transacciones\r\n          </button>\r\n        </div>}\r\n\r\n      {optimizedTransactions.length > 0 && <>\r\n          <div className=\"bg-white shadow-md rounded-lg p-6 mb-8\">\r\n            <h2 className=\"text-xl font-semibold mb-4\">Plan de Transferencias Optimizado</h2>\r\n            <p className=\"text-gray-600 mb-4\">\r\n              Hemos analizado tus {nodes.length} cuentas en {new Set(nodes.map(n => n.currency)).size} monedas diferentes \r\n              para crear un plan eficiente de transferencias:\r\n            </p>\r\n            <ul className=\"list-disc pl-5 mb-4 text-gray-600\">\r\n              <li>En lugar de hacer {nodes.length * (nodes.length - 1) / 2} transferencias individuales, te sugerimos hacer solo {optimizedTransactions.length}.</li>\r\n              <li>El monto total involucrado en estas transferencias es de {optimizedTransactions.reduce((sum, t) => sum + t.weight, 0).toFixed(2)} USD.</li>\r\n              <li>Este plan reduce la complejidad y potencialmente las comisiones bancarias al minimizar el n\u00FAmero de transacciones.</li>\r\n            </ul>\r\n            <p className=\"text-gray-600 mb-4\">\r\n              Beneficios de este plan:\r\n            </p>\r\n            <ul className=\"list-disc pl-5 mb-4 text-gray-600\">\r\n              <li>Simplificaci\u00F3n: Reduces el n\u00FAmero de transferencias que necesitas gestionar.</li>\r\n              <li>Potencial ahorro en comisiones: Menos transferencias podr\u00EDan significar menos comisiones bancarias totales.</li>\r\n              <li>Eficiencia: Este plan conecta todas tus cuentas de la manera m\u00E1s eficiente posible.</li>\r\n              {nodes.some(n => n.currency !== 'USD') && <li>Manejo de m\u00FAltiples divisas: El plan considera las diferentes monedas involucradas.</li>}\r\n            </ul>\r\n            <p className=\"text-gray-600 mb-4\">\r\n              Plan de transferencias sugerido:\r\n            </p>\r\n            <table className=\"w-full\">\r\n              <thead>\r\n                <tr className=\"bg-gray-100\">\r\n                  <th className=\"p-2 text-left\">Desde</th>\r\n                  <th className=\"p-2 text-left\">Hacia</th>\r\n                  <th className=\"p-2 text-right\">Monto a Transferir</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {optimizedTransactions.map((transaction, index) => <tr key={index} className=\"border-b\">\r\n                    <td className=\"p-2\">{transaction.from}</td>\r\n                    <td className=\"p-2\">{transaction.to}</td>\r\n                    <td className=\"p-2 text-right text-blue-600 font-semibold\">\r\n                      {transaction.weight.toFixed(2)} USD\r\n                    </td>\r\n                  </tr>)}\r\n              </tbody>\r\n            </table>\r\n            <p className=\"text-gray-600 mt-4\">\r\n              <strong>Explicaci\u00F3n:</strong>\r\n              <ul className=\"list-disc pl-5 mt-2\">\r\n                <li><strong>Desde y Hacia:</strong> Indican las cuentas entre las que se sugiere realizar la transferencia.</li>\r\n                <li><strong>Monto a Transferir:</strong> Es la cantidad sugerida para transferir de la cuenta \"Desde\" a la cuenta \"Hacia\".</li>\r\n              </ul>\r\n            </p>\r\n            <p className=\"text-gray-600 mt-4\">\r\n              Nota: Este plan sugiere las transferencias \u00F3ptimas para conectar todas tus cuentas.\r\n            </p>\r\n          </div>\r\n\r\n          <div className=\"bg-white shadow-md rounded-lg p-6\">\r\n            <h2 className=\"text-xl font-semibold mb-4\">Resultados y Beneficios</h2>\r\n            <p className=\"text-gray-600 mb-4\">\r\n              Despu\u00E9s de aplicar el plan de transferencias optimizado, estos son los resultados y beneficios esperados:\r\n            </p>\r\n            <ul className=\"list-disc pl-5 mb-4 text-gray-600\">\r\n              <li>N\u00FAmero de transacciones reducidas: de {nodes.length * (nodes.length - 1) / 2} a {optimizedTransactions.length}</li>\r\n              <li>Monto total transferido: {optimizedTransactions.reduce((sum, t) => sum + t.weight, 0).toFixed(2)} USD</li>\r\n              <li>Eficiencia de transferencia: {(100 * optimizedTransactions.length / (nodes.length * (nodes.length - 1) / 2)).toFixed(2)}%</li>\r\n            </ul>\r\n            <p className=\"text-gray-600 mb-4\">\r\n              <strong>Nodos actualizados despu\u00E9s de las transferencias:</strong>\r\n            </p>\r\n            <table className=\"w-full mb-4\">\r\n              <thead>\r\n                <tr className=\"bg-gray-100\">\r\n                  <th className=\"p-2 text-left\">Nombre</th>\r\n                  <th className=\"p-2 text-right\">Balance Original (USD)</th>\r\n                  <th className=\"p-2 text-right\">Balance Final Real (USD)</th>\r\n                  <th className=\"p-2 text-right\">Balance Equilibrado (USD)</th>\r\n                  <th className=\"p-2 text-right\">Diferencia</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {updatedNodes.map((node, index) => {\n              const originalNode = nodes.find(n => n.id === node.id);\n              const difference = (node.final_balance ?? node.balance) - (originalNode?.balance || 0);\n              return <tr key={node.id} className=\"border-b\">\r\n                      <td className=\"p-2\">{node.name}</td>\r\n                      <td className=\"p-2 text-right\">{originalNode?.balance.toFixed(2)}</td>\r\n                      <td className=\"p-2 text-right\">{(node.final_balance ?? node.balance).toFixed(2)}</td>\r\n                      <td className=\"p-2 text-right\">{node.balance.toFixed(2)}</td>\r\n                      <td className={`p-2 text-right ${difference > 0 ? 'text-green-600' : 'text-red-600'}`}>\r\n                        {difference > 0 ? '+' : ''}{difference.toFixed(2)}\r\n                      </td>\r\n                    </tr>;\n            })}\r\n              </tbody>\r\n            </table>\r\n            <p className=\"text-gray-600 mb-4\">\r\n              <strong>\u00BFPor qu\u00E9 optar por este plan?</strong>\r\n            </p>\r\n            <ul className=\"list-disc pl-5 mb-4 text-gray-600\">\r\n              <li>Minimiza el n\u00FAmero de transacciones, reduciendo la complejidad operativa y los posibles errores.</li>\r\n              <li>Optimiza el flujo de dinero entre cuentas, mejorando la liquidez general.</li>\r\n              <li>Reduce potencialmente los costos de transacci\u00F3n al minimizar el n\u00FAmero de transferencias internacionales.</li>\r\n              <li>Proporciona una visi\u00F3n clara y estructurada de las transferencias necesarias, facilitando la planificaci\u00F3n financiera.</li>\r\n            </ul>\r\n          </div>\r\n\r\n          <div className=\"bg-gray-900 text-green-400 shadow-md rounded-lg p-6 mt-8 font-mono\">\r\n            <h2 className=\"text-2xl font-semibold mb-4 text-white\">Consola de Algoritmo</h2>\r\n            <div className=\"mb-4 text-yellow-300\">\r\n              <h3 className=\"text-xl font-semibold mb-2\">Uso del Algoritmo de Kruskal</h3>\r\n              <p>El algoritmo de Kruskal se utiliza para encontrar el \u00C1rbol de Expansi\u00F3n M\u00EDnima (MST) en un grafo ponderado. En nuestro caso:</p>\r\n              <ul className=\"list-disc pl-5 mt-2\">\r\n                <li>Cada cuenta es un nodo en el grafo.</li>\r\n                <li>Las posibles transferencias entre cuentas son las aristas.</li>\r\n                <li>El peso de cada arista es la cantidad de dinero a transferir.</li>\r\n              </ul>\r\n              <p className=\"mt-2\">El algoritmo de Kruskal nos ayuda a:</p>\r\n              <ul className=\"list-disc pl-5 mt-2\">\r\n                <li>Minimizar el n\u00FAmero total de transferencias necesarias.</li>\r\n                <li>Encontrar la ruta m\u00E1s eficiente para mover el dinero entre todas las cuentas.</li>\r\n                <li>Reducir los costos potenciales asociados con m\u00FAltiples transferencias.</li>\r\n              </ul>\r\n            </div>\r\n            <div className=\"h-96 overflow-y-auto bg-black p-4 rounded-lg\">\r\n              {algorithmLogs.map((log, index) => {\n            let logClass = \"mb-1\";\n            let prefix = \">\";\n            if (log.includes(\"Iniciando\")) {\n              logClass += \" text-yellow-300 font-bold\";\n              prefix = \"\uD83D\uDE80\";\n            } else if (log.includes(\"Opci\u00F3n de balance\")) {\n              logClass += \" text-blue-300\";\n              prefix = \"\u2696\uFE0F\";\n            } else if (log.includes(\"Transferencias calculadas\")) {\n              logClass += \" text-purple-300\";\n              prefix = \"\uD83D\uDCB1\";\n            } else if (log.includes(\"Aristas\")) {\n              logClass += \" text-cyan-300\";\n              prefix = \"\uD83D\uDD17\";\n            } else if (log.includes(\"A\u00F1adida arista\")) {\n              logClass += \" text-green-300\";\n              prefix = \"\u2705\";\n            } else if (log.includes(\"descartada\")) {\n              logClass += \" text-red-300\";\n              prefix = \"\u274C\";\n            } else if (log.includes(\"Transferencia:\")) {\n              logClass += \" text-orange-300\";\n              prefix = \"\uD83D\uDCB8\";\n            } else if (log.includes(\"completado\")) {\n              logClass += \" text-green-300 font-bold\";\n              prefix = \"\uD83C\uDFC1\";\n            }\n            return <p key={index} className={logClass}>\r\n                    <span className=\"mr-2\">{prefix}</span>\r\n                    {log}\r\n                  </p>;\n          })}\r\n            </div>\r\n            <div className=\"mt-4 text-white\">\r\n              <h3 className=\"text-xl font-semibold mb-2\">Resumen del Proceso</h3>\r\n              <ul className=\"list-disc pl-5\">\r\n                <li>Nodos procesados: {nodes.length}</li>\r\n                <li>Transferencias optimizadas: {optimizedTransactions.length}</li>\r\n                <li>Monto total transferido: {optimizedTransactions.reduce((sum, t) => sum + t.weight, 0).toFixed(2)} USD</li>\r\n                <li>Eficiencia de transferencia: {(100 * optimizedTransactions.length / (nodes.length * (nodes.length - 1) / 2)).toFixed(2)}%</li>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n        </>}\r\n    </div>;\n}\n_s(OptimizacionGlobal, \"eyyqqqohctVcoio2rpG5baWLvUg=\", false, function () {\n  return [useLoaderData, useFetcher];\n});\n_c = OptimizacionGlobal;\nvar _c;\n$RefreshReg$(_c, \"OptimizacionGlobal\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": "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",
  "names": []
}
