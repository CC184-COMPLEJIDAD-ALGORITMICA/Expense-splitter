{
  "version": 3,
  "sources": ["empty-module:~/actions/expenses.server", "empty-module:~/actions/juntas.server", "../../../app/routes/_index.tsx", "../../../app/utils/floydWarshall.ts", "../../../app/utils/calculateIndividualSplits.ts", "../../../app/utils/calculateSplits.ts", "../../../app/utils/translations.ts", "../../../app/components/NotificationInbox.tsx"],
  "sourcesContent": ["module.exports = {};", "module.exports = {};", "// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app\\\\\\\\routes\\\\\\\\_index.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s2 = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app\\\\routes\\\\_index.tsx\");\n  import.meta.hot.lastModified = \"1727034877668.3875\";\n}\n// REMIX HMR END\n\nimport { json } from \"@remix-run/node\";\nimport { useLoaderData, useActionData, Form, useFetcher, useSubmit } from \"@remix-run/react\";\nimport { useState, useEffect, useCallback } from \"react\";\nimport { getUser, requireUserId, logout } from \"~/auth.server\";\nimport { db } from \"~/db.server\";\nimport { calculateEqualSplits, calculateIndividualSplits } from \"~/utils/calculateSplits\";\nimport { translations } from \"~/utils/translations\";\nimport { addLocalExpense, addJuntaExpense, deleteExpense } from \"~/actions/expenses.server\";\nimport { createJunta, clearJunta, inviteToJunta } from \"~/actions/juntas.server\";\nimport { respondToInvitation, getInvitations } from \"~/utils/invitations\";\nimport { NotificationInbox } from \"~/components/NotificationInbox\";\nimport { floydWarshall } from '~/utils/floydWarshall';\nexport const loader = async ({\n  request\n}) => {\n  const user = await getUser(request);\n  if (!user) {\n    return json({\n      user: null,\n      juntas: [],\n      localExpenses: [],\n      invitations: []\n    });\n  }\n  try {\n    const juntas = await db.junta.findMany({\n      where: {\n        OR: [{\n          ownerId: user.id\n        }, {\n          members: {\n            some: {\n              id: user.id\n            }\n          }\n        }]\n      },\n      include: {\n        members: true,\n        expenses: true\n      }\n    });\n    const localExpenses = await db.expense.findMany({\n      where: {\n        userId: user.id,\n        isLocal: true\n      }\n    });\n    const invitations = await getInvitations(user.id);\n    return json({\n      user,\n      juntas,\n      localExpenses,\n      invitations\n    });\n  } catch (error) {\n    console.error(\"Error in loader:\", error);\n    return json({\n      error: \"An error occurred while loading data\"\n    }, {\n      status: 500\n    });\n  }\n};\nexport const action = async ({\n  request\n}) => {\n  const form = await request.formData();\n  const action = form.get(\"action\");\n  switch (action) {\n    case \"addLocalExpense\":\n      {\n        const userId = await requireUserId(request);\n        const description = form.get(\"description\");\n        const amount = parseFloat(form.get(\"amount\"));\n        const splitAmong = form.get(\"splitAmong\");\n        return await addLocalExpense(userId, {\n          description,\n          amount,\n          paidBy: userId,\n          splitAmong\n        });\n      }\n    case \"addJuntaExpense\":\n      {\n        const userId = await requireUserId(request);\n        const juntaId = form.get(\"juntaId\");\n        const description = form.get(\"description\");\n        const amount = parseFloat(form.get(\"amount\"));\n        const splitAmong = form.get(\"splitAmong\");\n        console.log(\"Action received splitAmong:\", splitAmong); // Add this line\n\n        if (!splitAmong) {\n          return json({\n            error: \"splitAmong is required\"\n          }, {\n            status: 400\n          });\n        }\n        return await addJuntaExpense(userId, {\n          juntaId,\n          description,\n          amount,\n          splitAmong\n        });\n      }\n    case \"createJunta\":\n      {\n        const userId = await requireUserId(request);\n        const juntaName = form.get(\"juntaName\");\n        return await createJunta(userId, juntaName);\n      }\n    case \"inviteToJunta\":\n      {\n        const userId = await requireUserId(request);\n        const juntaId = form.get(\"juntaId\");\n        const invitedUsername = form.get(\"invitedUsername\");\n        return await inviteToJunta(juntaId, invitedUsername, userId);\n      }\n    case \"deleteExpense\":\n      {\n        const expenseId = form.get(\"expenseId\");\n        return await deleteExpense(expenseId);\n      }\n    case \"clearJunta\":\n      {\n        const juntaId = form.get(\"juntaId\");\n        return await clearJunta(juntaId);\n      }\n    case \"respondToInvitation\":\n      {\n        const invitationId = form.get(\"invitationId\");\n        const accept = form.get(\"accept\") === \"true\";\n        const result = await respondToInvitation(invitationId, accept);\n        if (result.success && accept) {\n          // Obtener la junta actualizada\n          const updatedJunta = await db.junta.findUnique({\n            where: {\n              id: result.juntaId\n            },\n            include: {\n              members: true,\n              expenses: true\n            }\n          });\n          return json({\n            ...result,\n            junta: updatedJunta\n          });\n        }\n        return json(result);\n      }\n    case \"logout\":\n      return await logout(request);\n    default:\n      return json({\n        error: \"Invalid action\"\n      }, {\n        status: 400\n      });\n  }\n};\nfunction convertDates(junta) {\n  return {\n    ...junta,\n    expenses: junta.expenses.map(expense => ({\n      ...expense,\n      createdAt: new Date(expense.createdAt)\n    }))\n  };\n}\nexport default function Index() {\n  _s2();\n  var _s = $RefreshSig$();\n  const {\n    user,\n    juntas: initialJuntas,\n    localExpenses: initialLocalExpenses,\n    invitations: initialInvitations\n  } = useLoaderData();\n  const actionData = useActionData();\n  const [language, setLanguage] = useState('es');\n  const [showTutorial, setShowTutorial] = useState(user?.isNewUser ?? false);\n  const [selectedJunta, setSelectedJunta] = useState(null);\n  const [showNotifications, setShowNotifications] = useState(false);\n  const [splits, setSplits] = useState([]);\n  const [splitAmongAll, setSplitAmongAll] = useState(false);\n  const [juntas, setJuntas] = useState(initialJuntas.map(convertDates));\n  const [localExpenses, setLocalExpenses] = useState(initialLocalExpenses);\n  const [invitations, setInvitations] = useState(initialInvitations);\n  const fetcher = useFetcher();\n  const submit = useSubmit();\n  const t = translations[language];\n  const toggleLanguage = () => {\n    setLanguage(prev => prev === 'es' ? 'en' : 'es');\n  };\n  const [splitType, setSplitType] = useState('equal');\n  const [algorithmExplanation, setAlgorithmExplanation] = useState('');\n  const handleCalculateSplits = useCallback(() => {\n    if (selectedJunta) {\n      const calculatedSplits = splitType === 'equal' ? calculateEqualSplits(selectedJunta.expenses, selectedJunta.members) : calculateIndividualSplits(selectedJunta.expenses, selectedJunta.members);\n      setSplits(calculatedSplits);\n\n      // Explicaci\u00F3n del algoritmo\n      if (splitType === 'equal') {\n        setAlgorithmExplanation(t.equalSplitExplanation);\n      } else {\n        setAlgorithmExplanation(t.individualSplitExplanation);\n      }\n\n      // Aplicar Floyd-Warshall para optimizar las transferencias\n      const optimizedSplits = floydWarshall(calculatedSplits);\n      setSplits(optimizedSplits);\n      setAlgorithmExplanation(prevExplanation => `${prevExplanation}\\n\\n${t.floydWarshallExplanation}`);\n    } else if (user) {\n      const calculatedSplits = splitType === 'equal' ? calculateEqualSplits(localExpenses, [user]) : calculateIndividualSplits(localExpenses, [user]);\n      setSplits(calculatedSplits);\n    }\n  }, [selectedJunta, localExpenses, user, splitType, t]);\n  useEffect(() => {\n    handleCalculateSplits();\n  }, [selectedJunta, localExpenses, handleCalculateSplits]);\n  const updateJuntas = newJunta => {\n    setJuntas(prevJuntas => {\n      const index = prevJuntas.findIndex(j => j.id === newJunta.id);\n      if (index !== -1) {\n        // Si la junta ya existe, actualizarla\n        const updatedJuntas = [...prevJuntas];\n        updatedJuntas[index] = convertDates(newJunta);\n        return updatedJuntas;\n      } else {\n        // Si es una nueva junta, a\u00F1adirla al array\n        return [...prevJuntas, convertDates(newJunta)];\n      }\n    });\n  };\n  const handleInvitationResponse = async (invitationId, accept) => {\n    _s();\n    const formData = new FormData();\n    formData.append('action', 'respondToInvitation');\n    formData.append('invitationId', invitationId);\n    formData.append('accept', accept.toString());\n    fetcher.submit(formData, {\n      method: \"post\"\n    });\n\n    // We'll use a state to track when the fetcher has completed\n    const [fetcherCompleted, setFetcherCompleted] = useState(false);\n    useEffect(() => {\n      if (fetcher.state === 'idle' && fetcher.data) {\n        setFetcherCompleted(true);\n      }\n    }, [fetcher.state, fetcher.data]);\n\n    // Wait for the fetcher to complete\n    while (!fetcherCompleted) {\n      await new Promise(resolve => setTimeout(resolve, 100));\n    }\n    if (fetcher.data && 'success' in fetcher.data) {\n      if (fetcher.data.success && 'junta' in fetcher.data && fetcher.data.junta) {\n        updateJuntas(fetcher.data.junta);\n      }\n      return {\n        success: fetcher.data.success,\n        message: fetcher.data.message || '',\n        junta: fetcher.data.junta\n      };\n    }\n    return {\n      success: false,\n      message: 'An error occurred while processing the invitation'\n    };\n  };\n  _s(handleInvitationResponse, \"K93fMvfJgxvJ5qvVN+i9MLXi66w=\");\n  const handleInviteUser = async event => {\n    event.preventDefault();\n    const form = event.currentTarget;\n    const formData = new FormData(form);\n    fetcher.submit(formData, {\n      method: \"post\"\n    });\n  };\n  const handleAddExpense = event => {\n    event.preventDefault();\n    const form = event.currentTarget;\n    const formData = new FormData(form);\n    const action = formData.get(\"action\");\n    if (action === \"addLocalExpense\") {\n      fetcher.submit(formData, {\n        method: \"post\"\n      });\n    } else if (action === \"addJuntaExpense\") {\n      let splitAmong = formData.get(\"splitAmong\");\n      if (splitAmongAll && selectedJunta) {\n        splitAmong = selectedJunta.members.map(member => member.username).join(',');\n      }\n      if (!splitAmong) {\n        alert(t.pleaseSpecifySplitAmong);\n        return;\n      }\n      formData.set(\"splitAmong\", splitAmong);\n      formData.set(\"juntaId\", selectedJunta.id);\n      fetcher.submit(formData, {\n        method: \"post\"\n      });\n    }\n    form.reset();\n  };\n  const handleDeleteExpense = expenseId => {\n    fetcher.submit({\n      action: \"deleteExpense\",\n      expenseId\n    }, {\n      method: \"post\"\n    });\n  };\n  useEffect(() => {\n    if (fetcher.data && fetcher.state === \"idle\") {\n      if (fetcher.data.success) {\n        if ('expense' in fetcher.data && fetcher.data.expense) {\n          const newExpense = {\n            ...fetcher.data.expense,\n            createdAt: new Date(fetcher.data.expense.createdAt)\n          };\n          setLocalExpenses(prevExpenses => [...prevExpenses, newExpense]);\n        } else if ('deletedExpenseId' in fetcher.data && fetcher.data.deletedExpenseId) {\n          const deletedId = fetcher.data.deletedExpenseId;\n          if (selectedJunta) {\n            setSelectedJunta(prevJunta => {\n              if (prevJunta) {\n                return {\n                  ...prevJunta,\n                  expenses: prevJunta.expenses.filter(expense => expense.id !== deletedId)\n                };\n              }\n              return null;\n            });\n          } else {\n            setLocalExpenses(prevExpenses => prevExpenses.filter(expense => expense.id !== deletedId));\n          }\n        } else if ('junta' in fetcher.data && fetcher.data.junta) {\n          updateJuntas(fetcher.data.junta);\n        }\n      } else if ('error' in fetcher.data && fetcher.data.error) {\n        console.error(\"Error:\", fetcher.data.error);\n        // Aqu\u00ED puedes manejar el error, por ejemplo, mostrando un mensaje al usuario\n      }\n    }\n  }, [fetcher.data, fetcher.state, selectedJunta]);\n  useEffect(() => {\n    if (actionData?.junta) {\n      setSelectedJunta(convertDates(actionData.junta));\n    }\n  }, [actionData]);\n  return <div className=\"container mx-auto p-4 bg-gray-100 min-h-screen\">\n      {user ? <>\n          <div className=\"flex justify-between items-center mb-6\">\n            <h1 className=\"text-3xl font-bold text-blue-600\">{t.welcome}, {user.username}!</h1>\n            <div className=\"flex items-center\">\n              <button onClick={() => setLanguage(lang => lang === 'es' ? 'en' : 'es')} className=\"bg-yellow-500 text-white p-2 rounded hover:bg-yellow-600 transition mr-2\">\n                {language === 'es' ? 'EN' : 'ES'}\n              </button>\n              <Form method=\"post\">\n                <input type=\"hidden\" name=\"action\" value=\"logout\" />\n                <button type=\"submit\" className=\"bg-red-500 text-white p-2 rounded hover:bg-red-600 transition\">\n                  {t.logout}\n                </button>\n              </Form>\n            </div>\n          </div>\n          \n          {showTutorial && <div className=\"bg-white p-6 rounded-lg shadow-md mb-6\">\n              <h2 className=\"text-2xl font-bold mb-4\">{t.tutorial.welcome}</h2>\n              {t.tutorial.algorithms.map((algo, index) => <div key={index} className=\"mb-4\">\n                  <h3 className=\"text-xl font-semibold\">{algo.name}</h3>\n                  <p>{algo.description}</p>\n                </div>)}\n              <button onClick={() => setShowTutorial(false)} className=\"mt-4 bg-yellow-500 text-white px-4 py-2 rounded hover:bg-yellow-600 transition\">\n                {t.tutorial.close}\n              </button>\n            </div>}\n\n          <div className=\"mb-6\">\n            <h2 className=\"text-2xl font-semibold mb-4 text-blue-800\">{t.createJunta}</h2>\n            <Form method=\"post\" className=\"flex space-x-2\">\n              <input type=\"hidden\" name=\"action\" value=\"createJunta\" />\n              <input type=\"text\" name=\"juntaName\" placeholder={t.juntaName} className=\"flex-grow border p-2 rounded\" required />\n              <button type=\"submit\" className=\"bg-blue-500 text-white p-2 rounded hover:bg-blue-600 transition\">\n                {t.create}\n              </button>\n            </Form>\n          </div>\n\n          <div className=\"mb-6\">\n            <h2 className=\"text-2xl font-semibold mb-4 text-blue-800\">{t.yourJuntas}</h2>\n            {Array.isArray(juntas) && juntas.length > 0 ? <select onChange={e => {\n          const selected = juntas.find(j => j.id === e.target.value);\n          setSelectedJunta(selected || null);\n        }} className=\"w-full p-2 border rounded mb-4\">\n                <option value=\"\">{t.selectJunta}</option>\n                {juntas.map(j => <option key={j.id} value={j.id}>\n                    {j.name}\n                  </option>)}\n              </select> : <p>{t.noJuntas}</p>}\n          </div>\n\n          {selectedJunta && <div className=\"bg-white p-6 rounded-lg shadow-md mb-6\">\n              <h3 className=\"text-xl font-semibold mb-4 text-blue-700\">{selectedJunta.name}</h3>\n              \n              <Form method=\"post\" onSubmit={handleInviteUser} className=\"mb-4\">\n                <input type=\"hidden\" name=\"action\" value=\"inviteToJunta\" />\n                <input type=\"hidden\" name=\"juntaId\" value={selectedJunta.id} />\n                <div className=\"flex space-x-2\">\n                  <input type=\"text\" name=\"invitedUsername\" placeholder={t.inviteUser} className=\"flex-grow border p-2 rounded\" required />\n                  <button type=\"submit\" className=\"bg-green-500 text-white p-2 rounded hover:bg-green-600 transition\">\n                    {t.invite}\n                  </button>\n                </div>\n              </Form>\n\n              <Form method=\"post\" onSubmit={handleAddExpense} className=\"mb-4\">\n                <input type=\"hidden\" name=\"action\" value=\"addJuntaExpense\" />\n                <input type=\"hidden\" name=\"juntaId\" value={selectedJunta.id} />\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-2\">\n                  <input type=\"text\" name=\"description\" placeholder={t.description} className=\"border p-2 rounded\" required />\n                  <input type=\"number\" name=\"amount\" placeholder={t.amount} className=\"border p-2 rounded\" required />\n                  <div className=\"flex items-center\">\n                    <input type=\"text\" name=\"splitAmong\" placeholder={t.splitAmong} className=\"border p-2 rounded flex-grow\" required={!splitAmongAll} disabled={splitAmongAll} />\n                    <label className=\"ml-2 flex items-center\">\n                      <input type=\"checkbox\" checked={splitAmongAll} onChange={() => setSplitAmongAll(!splitAmongAll)} className=\"mr-1\" />\n                      {t.splitAmongAll}\n                    </label>\n                  </div>\n                </div>\n                <button type=\"submit\" className=\"mt-2 bg-blue-500 text-white p-2 rounded hover:bg-blue-600 transition\">\n                  {t.addExpense}\n                </button>\n              </Form>\n\n              {/* Gastos de la Junta */}\n              <div className=\"mt-6\">\n                <h4 className=\"text-lg font-semibold text-blue-600\">{t.juntaExpenses}</h4>\n                <ul className=\"space-y-2\">\n                  {selectedJunta.expenses.map(expense => <li key={expense.id} className=\"bg-gray-100 p-2 rounded flex justify-between items-center\">\n                      <span>\n                        {expense.description} - {expense.amount.toFixed(2)} \n                        ({t.paidBy} {selectedJunta.members.find(m => m.id === expense.paidBy)?.username})\n                      </span>\n                      <button onClick={() => handleDeleteExpense(expense.id)} className=\"bg-red-500 text-white p-1 rounded hover:bg-red-600 transition\">\n                        {t.deleteExpense}\n                      </button>\n                    </li>)}\n                </ul>\n              </div>\n\n              {/* Mis Gastos */}\n              <div className=\"mt-6\">\n                <h4 className=\"text-lg font-semibold text-blue-600\">{t.myExpenses}</h4>\n                <ul className=\"space-y-2\">\n                  {selectedJunta.expenses.filter(e => e.paidBy === user?.id).map(expense => <li key={expense.id} className=\"bg-gray-100 p-2 rounded flex justify-between items-center\">\n                      <span>{expense.description} - {expense.amount.toFixed(2)}</span>\n                      <button onClick={() => handleDeleteExpense(expense.id)} className=\"bg-red-500 text-white p-1 rounded hover:bg-red-600 transition\">\n                        {t.deleteExpense}\n                      </button>\n                    </li>)}\n                </ul>\n              </div>\n\n              <div className=\"mt-4 space-x-2\">\n                <button onClick={() => {\n            setSplitType('equal');\n            handleCalculateSplits();\n          }} className=\"bg-purple-500 text-white p-2 rounded hover:bg-purple-600 transition\">\n                  {t.equalizeMoneyButton}\n                </button>\n                <button onClick={() => {\n            setSplitType('individual');\n            handleCalculateSplits();\n          }} className=\"bg-green-500 text-white p-2 rounded hover:bg-green-600 transition\">\n                  {t.calculateDivisionsButton}\n                </button>\n              </div>\n\n              {/* Divisiones Generales */}\n              {splits.length > 0 && <div className=\"mt-4\">\n                  <h4 className=\"text-lg font-semibold text-blue-600\">\n                    {splitType === 'equal' ? t.generalSplitsEqual : t.generalSplitsIndividual}\n                  </h4>\n                  <ul className=\"space-y-2\">\n                    {splits.map((split, index) => <li key={index} className=\"bg-gray-100 p-2 rounded\">\n                        {`${split.from} ${t.owes} ${split.to}: ${split.amount.toFixed(2)}`}\n                      </li>)}\n                  </ul>\n                </div>}\n\n              {/* Mis Divisiones */}\n              {splits.length > 0 && <div className=\"mt-4\">\n                  <h4 className=\"text-lg font-semibold text-blue-600\">{t.mySplits}</h4>\n                  <ul className=\"space-y-2\">\n                    {splits.filter(split => split.from === user?.username || split.to === user?.username).map((split, index) => <li key={index} className=\"bg-gray-100 p-2 rounded\">\n                        {split.from === user?.username ? `${t.youOwe} ${split.to}: ${split.amount.toFixed(2)}` : `${split.from} ${t.owesYou}: ${split.amount.toFixed(2)}`}\n                      </li>)}\n                  </ul>\n                </div>}\n\n              <Form method=\"post\" className=\"mt-4\">\n                <input type=\"hidden\" name=\"action\" value=\"clearJunta\" />\n                <input type=\"hidden\" name=\"juntaId\" value={selectedJunta.id} />\n                <button type=\"submit\" className=\"bg-red-500 text-white p-2 rounded hover:bg-red-600 transition\">\n                  {t.clearJunta}\n                </button>\n              </Form>\n            </div>}\n\n          <div className=\"mb-6\">\n            <h2 className=\"text-2xl font-semibold mb-4 text-blue-800\">{t.localExpenses}</h2>\n            <Form method=\"post\" onSubmit={handleAddExpense} className=\"mb-4\">\n              <input type=\"hidden\" name=\"action\" value=\"addLocalExpense\" />\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-2\">\n                <input type=\"text\" name=\"description\" placeholder={t.description} className=\"border p-2 rounded\" required />\n                <input type=\"number\" name=\"amount\" placeholder={t.amount} className=\"border p-2 rounded\" required />\n                <input type=\"text\" name=\"splitAmong\" placeholder={t.splitAmong} className=\"border p-2 rounded\" required />\n              </div>\n              <button type=\"submit\" className=\"mt-2 bg-blue-500 text-white p-2 rounded hover:bg-blue-600 transition\">\n                {t.addLocalExpense}\n              </button>\n            </Form>\n\n            <ul className=\"space-y-2\">\n              {localExpenses.map(expense => <li key={expense.id} className=\"flex justify-between items-center bg-gray-100 p-2 rounded\">\n                  <span>{expense.description} - {expense.amount.toFixed(2)}</span>\n                  <button onClick={() => handleDeleteExpense(expense.id)} className=\"text-red-500 hover:text-red-700 transition\">\n                    {t.deleteExpense}\n                  </button>\n                </li>)}\n            </ul>\n\n            <button onClick={handleCalculateSplits} className=\"mt-4 bg-purple-500 text-white p-2 rounded hover:bg-purple-600 transition\">\n              {t.calculateSplits}\n            </button>\n\n            {splits.length > 0 && <div className=\"mt-4\">\n                <h3 className=\"text-lg font-semibold text-blue-600\">{t.splits}</h3>\n                <ul className=\"space-y-2\">\n                  {splits.map((split, index) => <li key={index} className=\"bg-gray-100 p-2 rounded\">\n                      {`${split.from} ${t.owes} ${split.to}: ${split.amount.toFixed(2)}`}\n                    </li>)}\n                </ul>\n              </div>}\n          </div>\n\n          <button onClick={() => setShowNotifications(!showNotifications)} className=\"bg-blue-500 text-white p-2 rounded mb-4 hover:bg-blue-600 transition\">\n            {t.notifications}\n          </button>\n          {showNotifications && user.id && <NotificationInbox userId={user.id} initialInvitations={invitations} onInvitationResponse={handleInvitationResponse} />}\n\n          {algorithmExplanation && <div className=\"mt-4 bg-white p-4 rounded-lg shadow\">\n              <h3 className=\"text-lg font-semibold mb-2\">{t.algorithmExplanationTitle}</h3>\n              <p className=\"whitespace-pre-line\">{algorithmExplanation}</p>\n            </div>}\n\n\n        </> : <div className=\"text-center\">\n          <p className=\"mb-4 text-xl\">{t.pleaseLogin}</p>\n          <div className=\"space-x-4\">\n            <a href=\"/login\" className=\"bg-blue-500 text-white p-2 rounded hover:bg-blue-600 transition\">\n              {t.login}\n            </a>\n            <a href=\"/register\" className=\"bg-green-500 text-white p-2 rounded hover:bg-green-600 transition\">\n              {t.register}\n            </a>\n          </div>\n        </div>}\n\n      {actionData?.error && <div className=\"text-red-500 mt-4 p-2 bg-red-100 rounded\">{actionData.error}</div>}\n    </div>;\n}\n_s2(Index, \"RmsEe2IVB/+Ua/1ya6Vy3b14o+Q=\", false, function () {\n  return [useLoaderData, useActionData, useFetcher, useSubmit];\n});\n_c = Index;\nvar _c;\n$RefreshReg$(_c, \"Index\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;", "// REMIX HMR BEGIN\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\nimport.meta.hot = __hmr__.createHotContext(\n//@ts-expect-error\n\"app\\\\utils\\\\floydWarshall.ts\"\n);\nimport.meta.hot.lastModified = \"1726731559766.386\";\n}\n// REMIX HMR END\n\nimport { Split } from '~/types';\r\n\r\nexport function floydWarshall(initialSplits: Split[]): Split[] {\r\n  console.log('Initial splits:', initialSplits);\r\n\r\n  const participants = Array.from(new Set(initialSplits.flatMap(split => [split.from, split.to])));\r\n  console.log('Participants:', participants);\r\n\r\n  const n = participants.length;\r\n  const dist: number[][] = Array(n).fill(0).map(() => Array(n).fill(0));\r\n\r\n  // Initialize distance matrix\r\n  initialSplits.forEach(split => {\r\n    const i = participants.indexOf(split.from);\r\n    const j = participants.indexOf(split.to);\r\n    dist[i][j] += split.amount;\r\n    dist[j][i] -= split.amount;\r\n  });\r\n  console.log('Initial distance matrix:', dist);\r\n\r\n  // Floyd-Warshall algorithm\r\n  for (let k = 0; k < n; k++) {\r\n    for (let i = 0; i < n; i++) {\r\n      for (let j = 0; j < n; j++) {\r\n        if (Math.abs(dist[i][k] + dist[k][j]) < Math.abs(dist[i][j])) {\r\n          dist[i][j] = dist[i][k] + dist[k][j];\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // Construct optimized splits\r\n  const optimizedSplits: Split[] = [];\r\n  for (let i = 0; i < n; i++) {\r\n    for (let j = i + 1; j < n; j++) {\r\n      const amount = parseFloat(dist[i][j].toFixed(2));\r\n      if (amount > 0.01) {\r\n        optimizedSplits.push({\r\n          from: participants[i],\r\n          to: participants[j],\r\n          amount: amount\r\n        });\r\n      } else if (amount < -0.01) {\r\n        optimizedSplits.push({\r\n          from: participants[j],\r\n          to: participants[i],\r\n          amount: -amount\r\n        });\r\n      }\r\n    }\r\n  }\r\n  console.log('Optimized splits:', optimizedSplits);\r\n\r\n  return optimizedSplits;\r\n}", "// REMIX HMR BEGIN\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\nimport.meta.hot = __hmr__.createHotContext(\n//@ts-expect-error\n\"app\\\\utils\\\\calculateIndividualSplits.ts\"\n);\nimport.meta.hot.lastModified = \"1726732256253.3955\";\n}\n// REMIX HMR END\n\nimport { AnyExpense, User, Split } from '~/types';\r\n\r\nexport function calculateIndividualSplits(expenses: AnyExpense[], participants: User[]): Split[] {\r\n  const balances: { [key: string]: number } = {};\r\n  participants.forEach(p => balances[p.id] = 0);\r\n\r\n  // Calcular los balances iniciales\r\n  const totalExpense = expenses.reduce((sum, expense) => sum + expense.amount, 0);\r\n  const averageExpense = totalExpense / participants.length;\r\n\r\n  expenses.forEach(expense => {\r\n    balances[expense.paidBy] += expense.amount;\r\n  });\r\n\r\n  participants.forEach(p => {\r\n    balances[p.id] -= averageExpense;\r\n  });\r\n\r\n  console.log(\"Balances iniciales:\", balances);\r\n\r\n  // Crear las divisiones\r\n  const splits: Split[] = [];\r\n  const debtors = participants.filter(p => balances[p.id] < 0);\r\n  const creditors = participants.filter(p => balances[p.id] > 0);\r\n\r\n  debtors.forEach(debtor => {\r\n    let remainingDebt = -balances[debtor.id];\r\n    creditors.forEach(creditor => {\r\n      if (remainingDebt > 0 && balances[creditor.id] > 0) {\r\n        const amount = Math.min(remainingDebt, balances[creditor.id]);\r\n        if (amount > 0.01) {\r\n          splits.push({\r\n            from: debtor.username,\r\n            to: creditor.username,\r\n            amount: parseFloat(amount.toFixed(2))\r\n          });\r\n        }\r\n        remainingDebt -= amount;\r\n        balances[creditor.id] -= amount;\r\n      }\r\n    });\r\n  });\r\n\r\n  console.log(\"Splits calculados:\", splits);\r\n\r\n  return splits;\r\n}", "// REMIX HMR BEGIN\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\nimport.meta.hot = __hmr__.createHotContext(\n//@ts-expect-error\n\"app\\\\utils\\\\calculateSplits.ts\"\n);\nimport.meta.hot.lastModified = \"1726732133062.3928\";\n}\n// REMIX HMR END\n\nimport { AnyExpense, User, Split } from '~/types';\r\nimport { floydWarshall } from './floydWarshall';\r\nimport { calculateIndividualSplits } from './calculateIndividualSplits';\r\n\r\n// Funci\u00F3n existente, renombrada para claridad\r\nexport function calculateEqualSplits(expenses: AnyExpense[], participants: User[]): Split[] {\r\n  const balances = calculateBalances(expenses, participants);\r\n  console.log('Calculated balances:', balances);\r\n\r\n  const initialSplits: Split[] = [];\r\n\r\n  // Crear splits iniciales basados en los balances\r\n  Object.entries(balances).forEach(([payer, balance]) => {\r\n    if (balance > 0) {\r\n      Object.entries(balances).forEach(([receiver, receiverBalance]) => {\r\n        if (receiverBalance < 0) {\r\n          const amount = Math.min(balance, -receiverBalance);\r\n          if (amount > 0.01) {\r\n            initialSplits.push({\r\n              from: payer,\r\n              to: receiver,\r\n              amount: parseFloat(amount.toFixed(2))\r\n            });\r\n          }\r\n        }\r\n      });\r\n    }\r\n  });\r\n\r\n  console.log('Initial splits:', initialSplits);\r\n\r\n  // Aplicar el algoritmo de Floyd-Warshall\r\n  const optimizedSplits = floydWarshall(initialSplits);\r\n\r\n  console.log('Optimized splits:', optimizedSplits);\r\n  return optimizedSplits;\r\n}\r\n\r\n// Nueva funci\u00F3n para calcular divisiones basadas en gastos individuales\r\nexport { calculateIndividualSplits };\r\n\r\nfunction calculateBalances(expenses: AnyExpense[], participants: User[]): { [key: string]: number } {\r\n  const balances: { [key: string]: number } = {};\r\n  participants.forEach(p => balances[p.username] = 0);\r\n\r\n  const totalExpense = expenses.reduce((sum, expense) => sum + expense.amount, 0);\r\n  const sharePerPerson = totalExpense / participants.length;\r\n\r\n  expenses.forEach(expense => {\r\n    const paidByUser = participants.find(p => p.id === expense.paidBy);\r\n    const paidBy = paidByUser ? paidByUser.username : expense.paidBy;\r\n    balances[paidBy] = (balances[paidBy] || 0) + expense.amount;\r\n  });\r\n\r\n  participants.forEach(person => {\r\n    balances[person.username] -= sharePerPerson;\r\n  });\r\n\r\n  return balances;\r\n}\r\n", "// REMIX HMR BEGIN\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\nimport.meta.hot = __hmr__.createHotContext(\n//@ts-expect-error\n\"app\\\\utils\\\\translations.ts\"\n);\nimport.meta.hot.lastModified = \"1727034822819.5696\";\n}\n// REMIX HMR END\n\nexport const translations = {\r\n  es: {\r\n    title: \"Divisor de Gastos\",\r\n    welcome: \"Bienvenido\",\r\n    addExpense: \"Agregar Gasto\",\r\n    description: \"Descripci\u00F3n\",\r\n    amount: \"Monto\",\r\n    splitAmong: \"Dividir Entre (separado por comas)\",\r\n    expenses: \"Gastos\",\r\n    calculateSplits: \"Calcular Divisiones\",\r\n    splits: \"Divisiones\",\r\n    logout: \"Cerrar Sesi\u00F3n\",\r\n    login: \"Iniciar Sesi\u00F3n\",\r\n    register: \"Registrarse\",\r\n    pleaseLogin: \"Por favor inicia sesi\u00F3n para usar el Divisor de Gastos.\",\r\n    owes: \"debe a\",\r\n    changeLanguage: \"Change to English\",\r\n    tutorial: {\r\n      welcome: \"Algoritmos utilizados en el Divisor de Gastos\",\r\n      algorithms: [\r\n        {\r\n          name: \"Floyd-Warshall\",\r\n          description: \"Utilizado en la funci\u00F3n 'Igualar Dinero'. Este algoritmo de programaci\u00F3n din\u00E1mica optimiza las transferencias de dinero entre los participantes. Funciona creando una matriz de distancias (deudas) entre todos los participantes y luego iterando sobre esta matriz para encontrar las rutas m\u00E1s eficientes para saldar deudas. En nuestra implementaci\u00F3n, inicializamos la matriz con las deudas directas y luego aplicamos el algoritmo para minimizar el n\u00FAmero de transacciones necesarias.\"\r\n        },\r\n        {\r\n          name: \"T\u00E9cnicas de recorrido en grafos\",\r\n          description: \"Utilizadas en la funci\u00F3n 'Calcular Divisiones'. Tratamos a los participantes como nodos de un grafo y sus deudas como aristas. Recorremos este grafo para calcular los balances individuales y luego determinar las transferencias \u00F3ptimas. Este enfoque nos permite manejar eficientemente las relaciones de deuda complejas entre m\u00FAltiples participantes.\"\r\n        },\r\n        {\r\n          name: \"Programaci\u00F3n Din\u00E1mica\",\r\n          description: \"Aplicada en ambas funciones de c\u00E1lculo de divisiones. En 'Igualar Dinero', la usamos dentro del algoritmo Floyd-Warshall para optimizar las transferencias. En 'Calcular Divisiones', la utilizamos para calcular eficientemente los balances acumulados de cada participante, evitando c\u00E1lculos redundantes al procesar m\u00FAltiples gastos.\"\r\n        }\r\n      ],\r\n      close: \"Cerrar Tutorial\"\r\n    },\r\n    juntas: \"Juntas\",\r\n    createJunta: \"Crear Nueva Junta\",\r\n    localExpenses: \"Gastos Locales\",\r\n    addLocalExpense: \"A\u00F1adir Gasto Local\",\r\n    deleteExpense: \"Eliminar Gasto\",\r\n    clearJunta: \"Vaciar Junta\",\r\n    paidBy: \"Pagado por\",\r\n    notifications: \"Notificaciones\",\r\n    inviteUser: \"Invitar usuario\",\r\n    invite: \"Invitar\",\r\n    closeTutorial: \"Cerrar tutorial\",\r\n    juntaName: \"Nombre de la junta\",\r\n    create: \"Crear\",\r\n    yourJuntas: \"Tus juntas\",\r\n    selectJunta: \"Seleccionar junta\",\r\n    noJuntas: \"No tienes juntas creadas a\u00FAn.\",\r\n    splitAmongAll: \"Dividir entre todos\",\r\n    pleaseSpecifySplitAmong: \"Por favor, especifica entre qui\u00E9nes se divide el gasto.\",\r\n    juntaExpenses: \"Gastos de la Junta\",\r\n    myExpenses: \"Mis Gastos\",\r\n    generalSplits: \"Divisiones Generales\",\r\n    mySplits: \"Mis Divisiones\",\r\n    youOwe: \"Debes a\",\r\n    owesYou: \"te debe\",\r\n    equalizeMoneyButton: \"Igualar Dinero\",\r\n    calculateDivisionsButton: \"Calcular Divisiones\",\r\n    generalSplitsEqual: \"Divisiones Generales (Igualadas)\",\r\n    generalSplitsIndividual: \"Divisiones Generales (Basadas en Gastos Individuales)\",\r\n    invitationAccepted: \"Invitaci\u00F3n aceptada con \u00E9xito\",\r\n    operationFailed: \"La operaci\u00F3n fall\u00F3 o devolvi\u00F3 datos inesperados\",\r\n    equalSplitExplanation: \"Para el c\u00E1lculo de divisiones iguales, se utiliz\u00F3 un algoritmo de Fuerza Bruta. Este m\u00E9todo suma todos los gastos, divide el total entre el n\u00FAmero de participantes y luego calcula las diferencias individuales.\",\r\n    individualSplitExplanation: \"Para el c\u00E1lculo de divisiones individuales, se aplic\u00F3 un algoritmo de Programaci\u00F3n Din\u00E1mica. Este m\u00E9todo optimiza las transferencias considerando los gastos individuales y las deudas acumuladas.\",\r\n    floydWarshallExplanation: \"Adicionalmente, se aplic\u00F3 el algoritmo de Floyd-Warshall para optimizar las transferencias. Este algoritmo de grafos encuentra las rutas m\u00E1s cortas entre todos los pares de nodos, minimizando el n\u00FAmero de transferencias necesarias.\",\r\n    algorithmExplanationTitle: \"Explicaci\u00F3n del Algoritmo\",\r\n  },\r\n  en: {\r\n    title: \"Expense Splitter\",\r\n    welcome: \"Welcome\",\r\n    addExpense: \"Add Expense\",\r\n    description: \"Description\",\r\n    amount: \"Amount\",\r\n    splitAmong: \"Split Among (comma-separated)\",\r\n    expenses: \"Expenses\",\r\n    calculateSplits: \"Calculate Splits\",\r\n    splits: \"Splits\",\r\n    logout: \"Logout\",\r\n    login: \"Login\",\r\n    register: \"Register\",\r\n    pleaseLogin: \"Please log in to use the Expense Splitter.\",\r\n    owes: \"owes\",\r\n    changeLanguage: \"Cambiar a Espa\u00F1ol\",\r\n    tutorial: {\r\n      welcome: \"Algorithms used in the Expense Splitter\",\r\n      algorithms: [\r\n        {\r\n          name: \"Floyd-Warshall\",\r\n          description: \"Used in the 'Equalize Money' function. This dynamic programming algorithm optimizes money transfers between participants. It works by creating a distance (debt) matrix between all participants and then iterating over this matrix to find the most efficient routes to settle debts. In our implementation, we initialize the matrix with direct debts and then apply the algorithm to minimize the number of necessary transactions.\"\r\n        },\r\n        {\r\n          name: \"Graph traversal techniques\",\r\n          description: \"Used in the 'Calculate Divisions' function. We treat participants as nodes in a graph and their debts as edges. We traverse this graph to calculate individual balances and then determine optimal transfers. This approach allows us to efficiently handle complex debt relationships between multiple participants.\"\r\n        },\r\n        {\r\n          name: \"Dynamic Programming\",\r\n          description: \"Applied in both division calculation functions. In 'Equalize Money', we use it within the Floyd-Warshall algorithm to optimize transfers. In 'Calculate Divisions', we use it to efficiently calculate the accumulated balances of each participant, avoiding redundant calculations when processing multiple expenses.\"\r\n        }\r\n      ],\r\n      close: \"Close Tutorial\"\r\n    },\r\n    juntas: \"Groups\",\r\n    createJunta: \"Create New Group\",\r\n    localExpenses: \"Local Expenses\",\r\n    addLocalExpense: \"Add Local Expense\",\r\n    deleteExpense: \"Delete Expense\",\r\n    clearJunta: \"Clear Group\",\r\n    paidBy: \"Paid by\",\r\n    notifications: \"Notifications\",\r\n    inviteUser: \"Invite user\",\r\n    invite: \"Invite\",\r\n    closeTutorial: \"Close tutorial\",\r\n    juntaName: \"Group name\",\r\n    create: \"Create\",\r\n    yourJuntas: \"Your groups\",\r\n    selectJunta: \"Select group\",\r\n    noJuntas: \"You don't have any juntas created yet.\",\r\n    splitAmongAll: \"Split among all\",\r\n    pleaseSpecifySplitAmong: \"Please specify who to split the expense among.\",\r\n    juntaExpenses: \"Group Expenses\",\r\n    myExpenses: \"My Expenses\",\r\n    generalSplits: \"General Splits\",\r\n    mySplits: \"My Splits\",\r\n    youOwe: \"You owe\",\r\n    owesYou: \"owes you\",\r\n    equalizeMoneyButton: \"Equalize Money\",\r\n    calculateDivisionsButton: \"Calculate Divisions\",\r\n    generalSplitsEqual: \"General Splits (Equalized)\",\r\n    generalSplitsIndividual: \"General Splits (Based on Individual Expenses)\",\r\n    invitationAccepted: \"Invitation accepted successfully\",\r\n    operationFailed: \"The operation failed or returned unexpected data\",\r\n    equalSplitExplanation: \"For equal split calculations, a Brute Force algorithm was used. This method sums up all expenses, divides the total by the number of participants, and then calculates individual differences.\",\r\n    individualSplitExplanation: \"For individual split calculations, a Dynamic Programming algorithm was applied. This method optimizes transfers considering individual expenses and accumulated debts.\",\r\n    floydWarshallExplanation: \"Additionally, the Floyd-Warshall algorithm was applied to optimize transfers. This graph algorithm finds the shortest paths between all pairs of nodes, minimizing the number of necessary transfers.\",\r\n    algorithmExplanationTitle: \"Algorithm Explanation\",\r\n  }\r\n};", "// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app\\\\\\\\components\\\\\\\\NotificationInbox.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app\\\\components\\\\NotificationInbox.tsx\");\n  import.meta.hot.lastModified = \"1726738152681.2478\";\n}\n// REMIX HMR END\n\nimport { useState } from \"react\";\nexport function NotificationInbox({\n  userId,\n  initialInvitations,\n  onInvitationResponse\n}) {\n  _s();\n  const [invitations, setInvitations] = useState(initialInvitations);\n  const [responseMessages, setResponseMessages] = useState({});\n  const [isProcessing, setIsProcessing] = useState({});\n  const handleInvitationResponse = async (invitationId, accept) => {\n    if (isProcessing[invitationId]) return;\n    setIsProcessing(prev => ({\n      ...prev,\n      [invitationId]: true\n    }));\n    try {\n      const result = await onInvitationResponse(invitationId, accept);\n      setResponseMessages(prev => ({\n        ...prev,\n        [invitationId]: result.message\n      }));\n      if (result.success) {\n        setInvitations(prev => prev.filter(inv => inv.id !== invitationId));\n        // Aqu\u00ED podr\u00EDas actualizar el estado global de las juntas si es necesario\n        // Por ejemplo: updateJuntas(result.junta);\n      }\n      // Configurar un temporizador para limpiar el mensaje despu\u00E9s de 5 segundos\n      setTimeout(() => {\n        setResponseMessages(prev => {\n          const newMessages = {\n            ...prev\n          };\n          delete newMessages[invitationId];\n          return newMessages;\n        });\n      }, 5000);\n    } catch (error) {\n      console.error(\"Error processing invitation response:\", error);\n      setResponseMessages(prev => ({\n        ...prev,\n        [invitationId]: \"An error occurred. Please try again. (Maybe just need to reload the page and look for your groups)\"\n      }));\n    } finally {\n      setIsProcessing(prev => ({\n        ...prev,\n        [invitationId]: false\n      }));\n    }\n  };\n  if (invitations.length === 0 && Object.keys(responseMessages).length === 0) {\n    return <p className=\"text-gray-500 italic\">\r\n        No pending invitations. Try refreshing the page to check for new invitations.\r\n      </p>;\n  }\n  return <div className=\"space-y-4\">\r\n      <h2 className=\"text-xl font-semibold text-blue-600\">Invitations</h2>\r\n      {invitations.map(invitation => <div key={invitation.id} className=\"bg-white shadow-md rounded-lg p-4 border border-gray-200\">\r\n          <p className=\"text-lg mb-2\">\r\n            <span className=\"font-semibold text-blue-500\">{invitation.inviter.username}</span> invited you to join \r\n            <span className=\"font-semibold text-green-500\"> {invitation.junta.name}</span>\r\n          </p>\r\n          <div className=\"flex space-x-2 mt-2\">\r\n            <button onClick={() => handleInvitationResponse(invitation.id, true)} className={`bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600 transition ${isProcessing[invitation.id] ? 'opacity-50 cursor-not-allowed' : ''}`} disabled={isProcessing[invitation.id]}>\r\n              {isProcessing[invitation.id] ? 'Processing...' : 'Accept'}\r\n            </button>\r\n            <button onClick={() => handleInvitationResponse(invitation.id, false)} className={`bg-red-500 text-white px-4 py-2 rounded hover:bg-red-600 transition ${isProcessing[invitation.id] ? 'opacity-50 cursor-not-allowed' : ''}`} disabled={isProcessing[invitation.id]}>\r\n              {isProcessing[invitation.id] ? 'Processing...' : 'Reject'}\r\n            </button>\r\n          </div>\r\n          {responseMessages[invitation.id] && <p className={`mt-2 text-sm ${isProcessing[invitation.id] ? 'text-yellow-600' : 'text-green-600'}`}>\r\n              {responseMessages[invitation.id]}\r\n            </p>}\r\n        </div>)}\r\n      {Object.entries(responseMessages).map(([invitationId, message]) => <div key={invitationId} className=\"bg-blue-100 border-l-4 border-blue-500 text-blue-700 p-4 mb-4\" role=\"alert\">\r\n          <p className=\"font-bold\">Response:</p>\r\n          <p>{message}</p>\r\n        </div>)}\r\n    </div>;\n}\n_s(NotificationInbox, \"zQNdhMyYDoSWY1Vjm3reTjBWyjg=\");\n_c = NotificationInbox;\nvar _c;\n$RefreshReg$(_c, \"NotificationInbox\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": "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",
  "names": ["import_react", "import_jsx_dev_runtime", "_s", "_c"]
}
