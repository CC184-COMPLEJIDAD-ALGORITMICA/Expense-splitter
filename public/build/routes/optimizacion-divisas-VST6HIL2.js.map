{
  "version": 3,
  "sources": ["../../../app/routes/optimizacion-divisas.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app\\\\\\\\routes\\\\\\\\optimizacion-divisas.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app\\\\routes\\\\optimizacion-divisas.tsx\");\n  import.meta.hot.lastModified = \"1726822347569.54\";\n}\n// REMIX HMR END\n\nimport { useState } from 'react';\nimport { Form, useActionData, useNavigation, useSubmit } from '@remix-run/react';\nimport { json } from '@remix-run/node';\nimport { findBestConversionPath } from '../types/currencyExchange';\nimport { exportToExcel } from '../utils/excelExport';\nexport default function OptimizacionDivisas() {\n  _s();\n  const [amount, setAmount] = useState(1000);\n  const [currency, setCurrency] = useState('USD');\n  const [exchangeHouses, setExchangeHouses] = useState([]);\n  const [maxSteps, setMaxSteps] = useState(5);\n  const [allowRepetitions, setAllowRepetitions] = useState(false);\n  const actionData = useActionData();\n  const navigation = useNavigation();\n  const submit = useSubmit();\n  const handleSubmit = e => {\n    e.preventDefault();\n    const formData = new FormData();\n    formData.append('amount', amount.toString());\n    formData.append('currency', currency);\n    formData.append('exchangeHouses', JSON.stringify(exchangeHouses));\n    formData.append('maxSteps', maxSteps.toString());\n    formData.append('allowRepetitions', allowRepetitions.toString());\n    submit(formData, {\n      method: 'post'\n    });\n  };\n  const addExchangeHouse = () => {\n    setExchangeHouses([...exchangeHouses, {\n      name: '',\n      exchanges: []\n    }]);\n  };\n  const updateExchangeHouse = (index, house) => {\n    const newHouses = [...exchangeHouses];\n    newHouses[index] = house;\n    setExchangeHouses(newHouses);\n  };\n  const handleExportToExcel = () => {\n    if (actionData?.result) {\n      const data = [{\n        Step: 'Initial',\n        Amount: actionData.result.initialAmount,\n        Currency: currency\n      }, ...actionData.result.path.map((step, index) => ({\n        Step: index + 1,\n        Amount: step.toAmount,\n        Currency: step.to,\n        ExchangeHouse: step.exchangeHouse,\n        Rate: step.rate,\n        Operation: step.isBuy ? 'Compra' : 'Venta'\n      })), {\n        Step: 'Final',\n        Amount: actionData.result.finalAmountInUSD,\n        Currency: actionData.result.path[actionData.result.path.length - 1].to\n      }];\n      exportToExcel(data, 'OptimalConversionPath');\n    }\n  };\n  return <div className=\"container mx-auto p-4 max-w-4xl bg-gray-100 rounded-lg shadow-lg\">\r\n      <h1 className=\"text-3xl font-bold mb-6 text-center text-blue-600\">Optimizaci\u00F3n de Conversi\u00F3n de Divisas</h1>\r\n\r\n      <Form onSubmit={handleSubmit} className=\"mb-8 space-y-6\">\r\n        <div className=\"grid grid-cols-2 gap-4\">\r\n          <div className=\"bg-white p-4 rounded-lg shadow\">\r\n            <label htmlFor=\"amount\" className=\"block text-sm font-medium text-gray-700 mb-2\">Cantidad inicial:</label>\r\n            <input type=\"number\" id=\"amount\" value={amount} onChange={e => setAmount(Number(e.target.value))} className=\"w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500\" />\r\n            <p className=\"mt-2 text-sm text-gray-500\">Ingrese la cantidad de dinero con la que desea iniciar la operaci\u00F3n.</p>\r\n          </div>\r\n          <div className=\"bg-white p-4 rounded-lg shadow\">\r\n            <label htmlFor=\"currency\" className=\"block text-sm font-medium text-gray-700 mb-2\">Moneda inicial:</label>\r\n            <input type=\"text\" id=\"currency\" value={currency} onChange={e => setCurrency(e.target.value)} className=\"w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500\" />\r\n            <p className=\"mt-2 text-sm text-gray-500\">Ingrese el c\u00F3digo de la moneda inicial (ej. USD, EUR, PEN).</p>\r\n          </div>\r\n        </div>\r\n        <div className=\"bg-white p-4 rounded-lg shadow\">\r\n          <label htmlFor=\"maxSteps\" className=\"block text-sm font-medium text-gray-700 mb-2\">M\u00E1ximo de pasos:</label>\r\n          <input type=\"number\" id=\"maxSteps\" value={maxSteps} onChange={e => setMaxSteps(Number(e.target.value))} className=\"w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500\" />\r\n          <p className=\"mt-2 text-sm text-gray-500\">N\u00FAmero m\u00E1ximo de conversiones permitidas en la ruta.</p>\r\n        </div>\r\n        <div className=\"bg-white p-4 rounded-lg shadow\">\r\n          <h2 className=\"text-xl font-bold mb-4 text-blue-600\">Casas de Cambio</h2>\r\n          {exchangeHouses.map((house, index) => <ExchangeHouseInput key={index} house={house} onChange={updatedHouse => updateExchangeHouse(index, updatedHouse)} />)}\r\n          <button type=\"button\" onClick={addExchangeHouse} className=\"mt-4 bg-green-500 text-white p-2 rounded hover:bg-green-600 transition duration-300\">\r\n            Agregar Casa de Cambio\r\n          </button>\r\n        </div>\r\n        <div className=\"flex items-center\">\r\n          <input type=\"checkbox\" id=\"allowRepetitions\" checked={allowRepetitions} onChange={e => setAllowRepetitions(e.target.checked)} className=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded\" />\r\n          <label htmlFor=\"allowRepetitions\" className=\"ml-2 block text-sm text-gray-900\">\r\n            Permitir repeticiones de monedas en la ruta\r\n          </label>\r\n        </div>\r\n        <button type=\"submit\" className=\"w-full bg-blue-500 text-white p-3 rounded-lg hover:bg-blue-600 transition duration-300\">\r\n          Calcular ruta \u00F3ptima\r\n        </button>\r\n      </Form>\r\n\r\n      {actionData?.result && <div className=\"mt-8 bg-white p-6 rounded-lg shadow\">\r\n          <h2 className=\"text-2xl font-bold mb-4 text-blue-600\">Resultado \u00D3ptimo</h2>\r\n          <p className=\"text-lg\">Ganancia: <span className={`font-bold ${actionData.result.profit >= 0 ? 'text-green-600' : 'text-red-600'}`}>${actionData.result.profit.toFixed(2)} USD</span> ({actionData.result.profitPercentage.toFixed(2)}%)</p>\r\n          <p className=\"text-lg\">Cantidad inicial: ${actionData.result.initialAmount.toFixed(2)} {currency}</p>\r\n          <p className=\"text-lg\">Cantidad final: ${actionData.result.finalAmountInUSD.toFixed(2)} USD</p>\r\n          <h3 className=\"text-xl font-bold mt-6 mb-2 text-blue-600\">Pasos:</h3>\r\n          <ol className=\"list-decimal list-inside space-y-2\">\r\n            {actionData.result.path.map((step, index) => <li key={index} className=\"bg-gray-100 p-2 rounded\">\r\n                <span className=\"font-bold\">{step.exchangeHouse}:</span> {step.fromAmount.toFixed(2)} {step.from} \u2192 {step.toAmount.toFixed(2)} {step.to}\r\n                <span className=\"text-sm text-gray-600 ml-2\">({step.isBuy ? 'Compra' : 'Venta'}, Tasa: {step.rate.toFixed(4)})</span>\r\n              </li>)}\r\n          </ol>\r\n          <h3 className=\"text-xl font-bold mt-6 mb-2 text-blue-600\">Otras rutas posibles:</h3>\r\n          <ul className=\"list-disc list-inside space-y-1\">\r\n            {actionData.result.allPaths.slice(0, 5).map((path, index) => <li key={index}>\r\n                Ganancia: ${path.profit.toFixed(2)} USD ({path.profitPercentage.toFixed(2)}%)\r\n              </li>)}\r\n          </ul>\r\n          <button onClick={handleExportToExcel} className=\"mt-6 bg-green-500 text-white p-2 rounded hover:bg-green-600 transition duration-300\">\r\n            Exportar a Excel\r\n          </button>\r\n        </div>}\r\n    </div>;\n}\n_s(OptimizacionDivisas, \"bPfwxGCUSdi2MxA2X0DFUvp3jw8=\", false, function () {\n  return [useActionData, useNavigation, useSubmit];\n});\n_c = OptimizacionDivisas;\nfunction ExchangeHouseInput({\n  house,\n  onChange\n}) {\n  const addExchange = () => {\n    onChange({\n      ...house,\n      exchanges: [...house.exchanges, {\n        fromCurrency: '',\n        toCurrency: '',\n        buyRate: 0,\n        sellRate: 0\n      }]\n    });\n  };\n  const updateExchange = (index, exchange) => {\n    const newExchanges = [...house.exchanges];\n    newExchanges[index] = exchange;\n    onChange({\n      ...house,\n      exchanges: newExchanges\n    });\n  };\n  return <div className=\"border p-4 rounded mb-4 bg-gray-50\">\r\n      <input type=\"text\" value={house.name} onChange={e => onChange({\n      ...house,\n      name: e.target.value\n    })} placeholder=\"Nombre de la casa de cambio\" className=\"w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 mb-2\" />\r\n      {house.exchanges.map((exchange, index) => <div key={index} className=\"flex flex-wrap -mx-2 mb-2\">\r\n          <div className=\"px-2 w-1/4\">\r\n            <input type=\"text\" value={exchange.fromCurrency} onChange={e => updateExchange(index, {\n          ...exchange,\n          fromCurrency: e.target.value\n        })} placeholder=\"De\" className=\"w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500\" />\r\n          </div>\r\n          <div className=\"px-2 w-1/4\">\r\n            <input type=\"text\" value={exchange.toCurrency} onChange={e => updateExchange(index, {\n          ...exchange,\n          toCurrency: e.target.value\n        })} placeholder=\"A\" className=\"w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500\" />\r\n          </div>\r\n          <div className=\"px-2 w-1/4\">\r\n            <input type=\"number\" value={exchange.buyRate || ''} onChange={e => updateExchange(index, {\n          ...exchange,\n          buyRate: Number(e.target.value)\n        })} placeholder=\"Tasa de compra\" className=\"w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500\" />\r\n          </div>\r\n          <div className=\"px-2 w-1/4\">\r\n            <input type=\"number\" value={exchange.sellRate || ''} onChange={e => updateExchange(index, {\n          ...exchange,\n          sellRate: Number(e.target.value)\n        })} placeholder=\"Tasa de venta\" className=\"w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500\" />\r\n          </div>\r\n        </div>)}\r\n      <button type=\"button\" onClick={addExchange} className=\"bg-blue-500 text-white p-2 rounded hover:bg-blue-600 transition duration-300\">\r\n        Agregar Cambio\r\n      </button>\r\n    </div>;\n}\n_c2 = ExchangeHouseInput;\nexport const action = async ({\n  request\n}) => {\n  const formData = await request.formData();\n  const amount = Number(formData.get('amount'));\n  const currency = formData.get('currency');\n  const exchangeHouses = JSON.parse(formData.get('exchangeHouses'));\n  const maxSteps = Number(formData.get('maxSteps'));\n  const allowRepetitions = formData.get('allowRepetitions') === 'true';\n  console.log('Input data:', JSON.stringify({\n    amount,\n    currency,\n    exchangeHouses,\n    maxSteps,\n    allowRepetitions\n  }, null, 2));\n  const result = findBestConversionPath(amount, currency, exchangeHouses, maxSteps, allowRepetitions);\n  console.log('Result:', JSON.stringify(result, null, 2));\n  return json({\n    result\n  });\n};\nvar _c, _c2;\n$RefreshReg$(_c, \"OptimizacionDivisas\");\n$RefreshReg$(_c2, \"ExchangeHouseInput\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqBA,mBAAyB;AAEzB,kBAAqB;AA0Df;AAhFN,IAAI,CAAC,OAAO,gBAAgB,CAAC,OAAO,gBAAgB,CAAC,OAAO,kBAAkB;AAC5E,UAAQ,KAAK,kGAAkG;AACjH,OAAO;AACD,mBAAiB,OAAO;AACxB,mBAAiB,OAAO;AAC5B,SAAO,eAAe,CAAC,MAAM,OAAO;AAClC,WAAO,iBAAiB,SAAS,MAAM,gDAAkD,EAAE;AAAA,EAC7F;AACA,SAAO,eAAe,OAAO,iBAAiB;AAChD;AANM;AACA;AAMN,IAAI,KAAK,aAAa;AAEtB,IAAI,aAAa;AACf,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EAAuC;AACvC,cAAY,IAAI,eAAe;AACjC;AAQe,SAAR,sBAAuC;AAC5C,KAAG;AACH,QAAM,CAAC,QAAQ,SAAS,QAAI,uBAAS,GAAI;AACzC,QAAM,CAAC,UAAU,WAAW,QAAI,uBAAS,KAAK;AAC9C,QAAM,CAAC,gBAAgB,iBAAiB,QAAI,uBAAS,CAAC,CAAC;AACvD,QAAM,CAAC,UAAU,WAAW,QAAI,uBAAS,CAAC;AAC1C,QAAM,CAAC,kBAAkB,mBAAmB,QAAI,uBAAS,KAAK;AAC9D,QAAM,aAAa,cAAc;AACjC,QAAM,aAAa,cAAc;AACjC,QAAM,SAAS,UAAU;AACzB,QAAM,eAAe,OAAK;AACxB,MAAE,eAAe;AACjB,UAAM,WAAW,IAAI,SAAS;AAC9B,aAAS,OAAO,UAAU,OAAO,SAAS,CAAC;AAC3C,aAAS,OAAO,YAAY,QAAQ;AACpC,aAAS,OAAO,kBAAkB,KAAK,UAAU,cAAc,CAAC;AAChE,aAAS,OAAO,YAAY,SAAS,SAAS,CAAC;AAC/C,aAAS,OAAO,oBAAoB,iBAAiB,SAAS,CAAC;AAC/D,WAAO,UAAU;AAAA,MACf,QAAQ;AAAA,IACV,CAAC;AAAA,EACH;AACA,QAAM,mBAAmB,MAAM;AAC7B,sBAAkB,CAAC,GAAG,gBAAgB;AAAA,MACpC,MAAM;AAAA,MACN,WAAW,CAAC;AAAA,IACd,CAAC,CAAC;AAAA,EACJ;AACA,QAAM,sBAAsB,CAAC,OAAO,UAAU;AAC5C,UAAM,YAAY,CAAC,GAAG,cAAc;AACpC,cAAU,KAAK,IAAI;AACnB,sBAAkB,SAAS;AAAA,EAC7B;AACA,QAAM,sBAAsB,MAAM;AAChC,QAAI,YAAY,QAAQ;AACtB,YAAM,OAAO,CAAC;AAAA,QACZ,MAAM;AAAA,QACN,QAAQ,WAAW,OAAO;AAAA,QAC1B,UAAU;AAAA,MACZ,GAAG,GAAG,WAAW,OAAO,KAAK,IAAI,CAAC,MAAM,WAAW;AAAA,QACjD,MAAM,QAAQ;AAAA,QACd,QAAQ,KAAK;AAAA,QACb,UAAU,KAAK;AAAA,QACf,eAAe,KAAK;AAAA,QACpB,MAAM,KAAK;AAAA,QACX,WAAW,KAAK,QAAQ,WAAW;AAAA,MACrC,EAAE,GAAG;AAAA,QACH,MAAM;AAAA,QACN,QAAQ,WAAW,OAAO;AAAA,QAC1B,UAAU,WAAW,OAAO,KAAK,WAAW,OAAO,KAAK,SAAS,CAAC,EAAE;AAAA,MACtE,CAAC;AACD,oBAAc,MAAM,uBAAuB;AAAA,IAC7C;AAAA,EACF;AACA,SAAO,mDAAC,SAAI,WAAU,oEAClB;AAAA,uDAAC,QAAG,WAAU,qDAAoD,2DAAlE;AAAA;AAAA;AAAA;AAAA,WAAuG;AAAA,IAEvG,mDAAC,QAAK,UAAU,cAAc,WAAU,kBACtC;AAAA,yDAAC,SAAI,WAAU,0BACb;AAAA,2DAAC,SAAI,WAAU,kCACb;AAAA,6DAAC,WAAM,SAAQ,UAAS,WAAU,gDAA+C,iCAAjF;AAAA;AAAA;AAAA;AAAA,iBAAkG;AAAA,UAClG,mDAAC,WAAM,MAAK,UAAS,IAAG,UAAS,OAAO,QAAQ,UAAU,OAAK,UAAU,OAAO,EAAE,OAAO,KAAK,CAAC,GAAG,WAAU,2FAA5G;AAAA;AAAA;AAAA;AAAA,iBAAoM;AAAA,UACpM,mDAAC,OAAE,WAAU,8BAA6B,uFAA1C;AAAA;AAAA;AAAA;AAAA,iBAA8G;AAAA,aAHhH;AAAA;AAAA;AAAA;AAAA,eAIA;AAAA,QACA,mDAAC,SAAI,WAAU,kCACb;AAAA,6DAAC,WAAM,SAAQ,YAAW,WAAU,gDAA+C,+BAAnF;AAAA;AAAA;AAAA;AAAA,iBAAkG;AAAA,UAClG,mDAAC,WAAM,MAAK,QAAO,IAAG,YAAW,OAAO,UAAU,UAAU,OAAK,YAAY,EAAE,OAAO,KAAK,GAAG,WAAU,2FAAxG;AAAA;AAAA;AAAA;AAAA,iBAAgM;AAAA,UAChM,mDAAC,OAAE,WAAU,8BAA6B,8EAA1C;AAAA;AAAA;AAAA;AAAA,iBAAqG;AAAA,aAHvG;AAAA;AAAA;AAAA;AAAA,eAIA;AAAA,WAVF;AAAA;AAAA;AAAA;AAAA,aAWA;AAAA,MACA,mDAAC,SAAI,WAAU,kCACb;AAAA,2DAAC,WAAM,SAAQ,YAAW,WAAU,gDAA+C,mCAAnF;AAAA;AAAA;AAAA;AAAA,eAAmG;AAAA,QACnG,mDAAC,WAAM,MAAK,UAAS,IAAG,YAAW,OAAO,UAAU,UAAU,OAAK,YAAY,OAAO,EAAE,OAAO,KAAK,CAAC,GAAG,WAAU,2FAAlH;AAAA;AAAA;AAAA;AAAA,eAA0M;AAAA,QAC1M,mDAAC,OAAE,WAAU,8BAA6B,0EAA1C;AAAA;AAAA;AAAA;AAAA,eAA8F;AAAA,WAHhG;AAAA;AAAA;AAAA;AAAA,aAIA;AAAA,MACA,mDAAC,SAAI,WAAU,kCACb;AAAA,2DAAC,QAAG,WAAU,wCAAuC,+BAArD;AAAA;AAAA;AAAA;AAAA,eAAoE;AAAA,QACnE,eAAe,IAAI,CAAC,OAAO,UAAU,mDAAC,sBAA+B,OAAc,UAAU,kBAAgB,oBAAoB,OAAO,YAAY,KAAtF,OAAzB;AAAA;AAAA;AAAA;AAAA,eAAkH,CAAE;AAAA,QAC1J,mDAAC,YAAO,MAAK,UAAS,SAAS,kBAAkB,WAAU,uFAAsF,sCAAjJ;AAAA;AAAA;AAAA;AAAA,eAEA;AAAA,WALF;AAAA;AAAA;AAAA;AAAA,aAMA;AAAA,MACA,mDAAC,SAAI,WAAU,qBACb;AAAA,2DAAC,WAAM,MAAK,YAAW,IAAG,oBAAmB,SAAS,kBAAkB,UAAU,OAAK,oBAAoB,EAAE,OAAO,OAAO,GAAG,WAAU,uEAAxI;AAAA;AAAA;AAAA;AAAA,eAA4M;AAAA,QAC5M,mDAAC,WAAM,SAAQ,oBAAmB,WAAU,oCAAmC,2DAA/E;AAAA;AAAA;AAAA;AAAA,eAEA;AAAA,WAJF;AAAA;AAAA;AAAA;AAAA,aAKA;AAAA,MACA,mDAAC,YAAO,MAAK,UAAS,WAAU,0FAAyF,uCAAzH;AAAA;AAAA;AAAA;AAAA,aAEA;AAAA,SAjCF;AAAA;AAAA;AAAA;AAAA,WAkCA;AAAA,IAEC,YAAY,UAAU,mDAAC,SAAI,WAAU,uCAClC;AAAA,yDAAC,QAAG,WAAU,yCAAwC,mCAAtD;AAAA;AAAA;AAAA;AAAA,aAAsE;AAAA,MACtE,mDAAC,OAAE,WAAU,WAAU;AAAA;AAAA,QAAU,mDAAC,UAAK,WAAW,aAAa,WAAW,OAAO,UAAU,IAAI,mBAAmB,kBAAkB;AAAA;AAAA,UAAE,WAAW,OAAO,OAAO,QAAQ,CAAC;AAAA,UAAE;AAAA,aAAzI;AAAA;AAAA;AAAA;AAAA,eAA6I;AAAA,QAAO;AAAA,QAAG,WAAW,OAAO,iBAAiB,QAAQ,CAAC;AAAA,QAAE;AAAA,WAAtO;AAAA;AAAA;AAAA;AAAA,aAAwO;AAAA,MACxO,mDAAC,OAAE,WAAU,WAAU;AAAA;AAAA,QAAoB,WAAW,OAAO,cAAc,QAAQ,CAAC;AAAA,QAAE;AAAA,QAAE;AAAA,WAAxF;AAAA;AAAA;AAAA;AAAA,aAAiG;AAAA,MACjG,mDAAC,OAAE,WAAU,WAAU;AAAA;AAAA,QAAkB,WAAW,OAAO,iBAAiB,QAAQ,CAAC;AAAA,QAAE;AAAA,WAAvF;AAAA;AAAA;AAAA;AAAA,aAA2F;AAAA,MAC3F,mDAAC,QAAG,WAAU,6CAA4C,sBAA1D;AAAA;AAAA;AAAA;AAAA,aAAgE;AAAA,MAChE,mDAAC,QAAG,WAAU,sCACX,qBAAW,OAAO,KAAK,IAAI,CAAC,MAAM,UAAU,mDAAC,QAAe,WAAU,2BACnE;AAAA,2DAAC,UAAK,WAAU,aAAa;AAAA,eAAK;AAAA,UAAc;AAAA,aAAhD;AAAA;AAAA;AAAA;AAAA,eAAiD;AAAA,QAAO;AAAA,QAAE,KAAK,WAAW,QAAQ,CAAC;AAAA,QAAE;AAAA,QAAE,KAAK;AAAA,QAAK;AAAA,QAAI,KAAK,SAAS,QAAQ,CAAC;AAAA,QAAE;AAAA,QAAE,KAAK;AAAA,QACrI,mDAAC,UAAK,WAAU,8BAA6B;AAAA;AAAA,UAAE,KAAK,QAAQ,WAAW;AAAA,UAAQ;AAAA,UAAS,KAAK,KAAK,QAAQ,CAAC;AAAA,UAAE;AAAA,aAA7G;AAAA;AAAA;AAAA;AAAA,eAA8G;AAAA,WAF5D,OAAT;AAAA;AAAA;AAAA;AAAA,aAG3C,CAAK,KAJT;AAAA;AAAA;AAAA;AAAA,aAKA;AAAA,MACA,mDAAC,QAAG,WAAU,6CAA4C,qCAA1D;AAAA;AAAA;AAAA;AAAA,aAA+E;AAAA,MAC/E,mDAAC,QAAG,WAAU,mCACX,qBAAW,OAAO,SAAS,MAAM,GAAG,CAAC,EAAE,IAAI,CAAC,MAAM,UAAU,mDAAC,QAAe;AAAA;AAAA,QAC7D,KAAK,OAAO,QAAQ,CAAC;AAAA,QAAE;AAAA,QAAO,KAAK,iBAAiB,QAAQ,CAAC;AAAA,QAAE;AAAA,WADT,OAAT;AAAA;AAAA;AAAA;AAAA,aAE3D,CAAK,KAHT;AAAA;AAAA;AAAA;AAAA,aAIA;AAAA,MACA,mDAAC,YAAO,SAAS,qBAAqB,WAAU,uFAAsF,gCAAtI;AAAA;AAAA;AAAA;AAAA,aAEA;AAAA,SApBmB;AAAA;AAAA;AAAA;AAAA,WAqBrB;AAAA,OA5DC;AAAA;AAAA;AAAA;AAAA,SA6DL;AACJ;AACA,GAAG,qBAAqB,gCAAgC,OAAO,WAAY;AACzE,SAAO,CAAC,eAAe,eAAe,SAAS;AACjD,CAAC;AACD,KAAK;AACL,SAAS,mBAAmB;AAAA,EAC1B;AAAA,EACA;AACF,GAAG;AACD,QAAM,cAAc,MAAM;AACxB,aAAS;AAAA,MACP,GAAG;AAAA,MACH,WAAW,CAAC,GAAG,MAAM,WAAW;AAAA,QAC9B,cAAc;AAAA,QACd,YAAY;AAAA,QACZ,SAAS;AAAA,QACT,UAAU;AAAA,MACZ,CAAC;AAAA,IACH,CAAC;AAAA,EACH;AACA,QAAM,iBAAiB,CAAC,OAAO,aAAa;AAC1C,UAAM,eAAe,CAAC,GAAG,MAAM,SAAS;AACxC,iBAAa,KAAK,IAAI;AACtB,aAAS;AAAA,MACP,GAAG;AAAA,MACH,WAAW;AAAA,IACb,CAAC;AAAA,EACH;AACA,SAAO,mDAAC,SAAI,WAAU,sCAClB;AAAA,uDAAC,WAAM,MAAK,QAAO,OAAO,MAAM,MAAM,UAAU,OAAK,SAAS;AAAA,MAC9D,GAAG;AAAA,MACH,MAAM,EAAE,OAAO;AAAA,IACjB,CAAC,GAAG,aAAY,+BAA8B,WAAU,gGAHtD;AAAA;AAAA;AAAA;AAAA,WAGmJ;AAAA,IAClJ,MAAM,UAAU,IAAI,CAAC,UAAU,UAAU,mDAAC,SAAgB,WAAU,6BACjE;AAAA,yDAAC,SAAI,WAAU,cACb,6DAAC,WAAM,MAAK,QAAO,OAAO,SAAS,cAAc,UAAU,OAAK,eAAe,OAAO;AAAA,QACxF,GAAG;AAAA,QACH,cAAc,EAAE,OAAO;AAAA,MACzB,CAAC,GAAG,aAAY,MAAK,WAAU,2FAH3B;AAAA;AAAA;AAAA;AAAA,aAGmH,KAJrH;AAAA;AAAA;AAAA;AAAA,aAKA;AAAA,MACA,mDAAC,SAAI,WAAU,cACb,6DAAC,WAAM,MAAK,QAAO,OAAO,SAAS,YAAY,UAAU,OAAK,eAAe,OAAO;AAAA,QACtF,GAAG;AAAA,QACH,YAAY,EAAE,OAAO;AAAA,MACvB,CAAC,GAAG,aAAY,KAAI,WAAU,2FAH1B;AAAA;AAAA;AAAA;AAAA,aAGkH,KAJpH;AAAA;AAAA;AAAA;AAAA,aAKA;AAAA,MACA,mDAAC,SAAI,WAAU,cACb,6DAAC,WAAM,MAAK,UAAS,OAAO,SAAS,WAAW,IAAI,UAAU,OAAK,eAAe,OAAO;AAAA,QAC3F,GAAG;AAAA,QACH,SAAS,OAAO,EAAE,OAAO,KAAK;AAAA,MAChC,CAAC,GAAG,aAAY,kBAAiB,WAAU,2FAHvC;AAAA;AAAA;AAAA;AAAA,aAG+H,KAJjI;AAAA;AAAA;AAAA;AAAA,aAKA;AAAA,MACA,mDAAC,SAAI,WAAU,cACb,6DAAC,WAAM,MAAK,UAAS,OAAO,SAAS,YAAY,IAAI,UAAU,OAAK,eAAe,OAAO;AAAA,QAC5F,GAAG;AAAA,QACH,UAAU,OAAO,EAAE,OAAO,KAAK;AAAA,MACjC,CAAC,GAAG,aAAY,iBAAgB,WAAU,2FAHtC;AAAA;AAAA;AAAA;AAAA,aAG8H,KAJhI;AAAA;AAAA;AAAA;AAAA,aAKA;AAAA,SAxBgD,OAAV;AAAA;AAAA;AAAA;AAAA,WAyBxC,CAAM;AAAA,IACR,mDAAC,YAAO,MAAK,UAAS,SAAS,aAAa,WAAU,gFAA+E,8BAArI;AAAA;AAAA;AAAA;AAAA,WAEA;AAAA,OAjCG;AAAA;AAAA;AAAA;AAAA,SAkCL;AACJ;AACA,MAAM;AAuBN,IAAI;AAAJ,IAAQ;AACR,aAAa,IAAI,qBAAqB;AACtC,aAAa,KAAK,oBAAoB;AAEtC,OAAO,eAAe;AACtB,OAAO,eAAe;",
  "names": []
}
