{
  "version": 3,
  "sources": ["../../../app/routes/optimizacion-divisas.tsx", "../../../app/types/currencies.ts"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app\\\\\\\\routes\\\\\\\\optimizacion-divisas.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app\\\\routes\\\\optimizacion-divisas.tsx\");\n  import.meta.hot.lastModified = \"1726811196309.6792\";\n}\n// REMIX HMR END\n\nimport { useState, useEffect } from 'react';\nimport { useActionData, useSubmit, useLoaderData } from '@remix-run/react';\nimport { json } from '@remix-run/node';\nimport { floydWarshallAlgorithm } from '../utils/floydWarshallAlgorithm';\nimport { exportToExcel } from '../utils/excelExport';\nimport { currencieslist } from '~/types/currencies';\nimport { getExchangeRates } from '../utils/currencyUtils';\nexport const loader = async () => {\n  try {\n    const {\n      rates,\n      fromApi\n    } = await getExchangeRates();\n    return json({\n      exchangeRates: rates,\n      fromApi,\n      error: null\n    });\n  } catch (error) {\n    console.error('Error loading exchange rates:', error);\n    return json({\n      exchangeRates: null,\n      fromApi: false,\n      error: 'Failed to load exchange rates. Please try again.'\n    }, {\n      status: 500\n    });\n  }\n};\nexport const action = async ({\n  request\n}) => {\n  try {\n    const formData = await request.formData();\n    const transactions = JSON.parse(formData.get('transactions'));\n    const {\n      rates,\n      fromApi\n    } = await getExchangeRates();\n    console.log('Exchange rates:', rates);\n    const result = floydWarshallAlgorithm(transactions, rates);\n    console.log('Floyd-Warshall result:', result);\n    return json({\n      result,\n      exchangeRates: rates,\n      fromApi\n    });\n  } catch (error) {\n    console.error('Error calculating optimal routes:', error);\n    return json({\n      error: 'Failed to calculate optimal routes. Please try again.'\n    }, {\n      status: 500\n    });\n  }\n};\nexport default function OptimizacionDivisas() {\n  _s();\n  const actionData = useActionData();\n  const loaderData = useLoaderData();\n  const submit = useSubmit();\n  const [currencies] = useState(currencieslist);\n  const [transactions, setTransactions] = useState([]);\n  const [currentTransaction, setCurrentTransaction] = useState({});\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    if (loaderData.error) {\n      setError(loaderData.error);\n    } else {\n      setError(null);\n    }\n  }, [loaderData]);\n  useEffect(() => {\n    if (actionData?.error) {\n      setError(actionData.error);\n    } else if (actionData?.result) {\n      setError(null);\n    }\n  }, [actionData]);\n  const handleInputChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setCurrentTransaction(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n  const handleAddTransaction = e => {\n    e.preventDefault();\n    if (currentTransaction.from && currentTransaction.to && currentTransaction.amount && currentTransaction.name) {\n      setTransactions(prev => [...prev, currentTransaction]);\n      setCurrentTransaction({});\n    }\n  };\n  const handleCalculateOptimalRoutes = () => {\n    if (transactions.length > 0) {\n      submit({\n        transactions: JSON.stringify(transactions)\n      }, {\n        method: 'post'\n      });\n    } else {\n      setError('Please add at least one transaction before calculating optimal routes.');\n    }\n  };\n  const handleExport = () => {\n    if (actionData?.result) {\n      exportToExcel(actionData.result, 'Optimizacion_Divisas');\n    }\n  };\n  return <div className=\"container mx-auto p-4 max-w-4xl\">\r\n      <h1 className=\"text-4xl font-bold mb-8 text-center text-blue-600\">Optimizaci\u00F3n de Rutas de Conversi\u00F3n de Divisas</h1>\r\n      \r\n      {error && <div className=\"bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-4\" role=\"alert\">\r\n          <strong className=\"font-bold\">Error:</strong>\r\n          <span className=\"block sm:inline\"> {error}</span>\r\n        </div>}\r\n\r\n      {(loaderData.fromApi || actionData?.fromApi) && <div className=\"bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded relative mb-4\" role=\"alert\">\r\n          <span className=\"block sm:inline\">Tasas de cambio obtenidas exitosamente de la API.</span>\r\n        </div>}\r\n\r\n      <form onSubmit={handleAddTransaction} className=\"space-y-4 mb-8\">\r\n        <div className=\"grid grid-cols-2 gap-4\">\r\n          <select name=\"from\" value={currentTransaction.from || ''} onChange={handleInputChange} className=\"p-2 border rounded\" required>\r\n            <option value=\"\">Desde</option>\r\n            {currencies.map(currency => <option key={currency.code} value={currency.code}>{currency.code} - {currency.name}</option>)}\r\n          </select>\r\n          <select name=\"to\" value={currentTransaction.to || ''} onChange={handleInputChange} className=\"p-2 border rounded\" required>\r\n            <option value=\"\">Hasta</option>\r\n            {currencies.map(currency => <option key={currency.code} value={currency.code}>{currency.code} - {currency.name}</option>)}\r\n          </select>\r\n        </div>\r\n        <input type=\"number\" name=\"amount\" value={currentTransaction.amount || ''} onChange={handleInputChange} placeholder=\"Monto\" className=\"p-2 border rounded w-full\" required />\r\n        <input type=\"text\" name=\"name\" value={currentTransaction.name || ''} onChange={handleInputChange} placeholder=\"Nombre de la transacci\u00F3n\" className=\"p-2 border rounded w-full\" required />\r\n        <button type=\"submit\" className=\"bg-green-500 text-white p-2 rounded hover:bg-green-600 transition\">\r\n          Agregar Transacci\u00F3n\r\n        </button>\r\n      </form>\r\n\r\n      {transactions.length > 0 && <div className=\"mb-8\">\r\n          <h2 className=\"text-2xl font-bold mb-4\">Transacciones Agregadas</h2>\r\n          <ul>\r\n            {transactions.map((t, index) => <li key={index}>{t.name}: {t.amount} {t.from} a {t.to}</li>)}\r\n          </ul>\r\n        </div>}\r\n\r\n      <button onClick={handleCalculateOptimalRoutes} className=\"bg-blue-500 text-white p-2 rounded hover:bg-blue-600 transition mb-8\">\r\n        Calcular Rutas \u00D3ptimas\r\n      </button>\r\n\r\n      {actionData?.result && <div className=\"mt-8\">\r\n          <h2 className=\"text-2xl font-bold mb-4\">Resultados</h2>\r\n          <ul>\r\n            {actionData.result.map((r, index) => <li key={index}>{r.from} a {r.to}: Tasa = {r.rate.toFixed(4)}, Ruta: {r.path.join(' -> ')}</li>)}\r\n          </ul>\r\n          <button onClick={handleExport} className=\"mt-4 bg-yellow-500 text-white p-2 rounded hover:bg-yellow-600 transition\">\r\n            Exportar a Excel\r\n          </button>\r\n        </div>}\r\n    </div>;\n}\n_s(OptimizacionDivisas, \"jdBjhyJ0OrnuKl445l2rv25UBSM=\", false, function () {\n  return [useActionData, useLoaderData, useSubmit];\n});\n_c = OptimizacionDivisas;\nvar _c;\n$RefreshReg$(_c, \"OptimizacionDivisas\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;", "// REMIX HMR BEGIN\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\nimport.meta.hot = __hmr__.createHotContext(\n//@ts-expect-error\n\"app\\\\types\\\\currencies.ts\"\n);\nimport.meta.hot.lastModified = \"1726800926435.5137\";\n}\n// REMIX HMR END\n\nexport const   currencieslist = [\r\n    { code: 'USD', name: 'US Dollar' },\r\n    { code: 'AED', name: 'United Arab Emirates Dirham' },\r\n    { code: 'AFN', name: 'Afghan Afghani' },\r\n    { code: 'ALL', name: 'Albanian Lek' },\r\n    { code: 'AMD', name: 'Armenian Dram' },\r\n    { code: 'ANG', name: 'Netherlands Antillean Guilder' },\r\n    { code: 'AOA', name: 'Angolan Kwanza' },\r\n    { code: 'ARS', name: 'Argentine Peso' },\r\n    { code: 'AUD', name: 'Australian Dollar' },\r\n    { code: 'AWG', name: 'Aruban Florin' },\r\n    { code: 'AZN', name: 'Azerbaijani Manat' },\r\n    { code: 'BAM', name: 'Bosnia and Herzegovina Convertible Mark' },\r\n    { code: 'BBD', name: 'Barbadian Dollar' },\r\n    { code: 'BDT', name: 'Bangladeshi Taka' },\r\n    { code: 'BGN', name: 'Bulgarian Lev' },\r\n    { code: 'BHD', name: 'Bahraini Dinar' },\r\n    { code: 'BIF', name: 'Burundian Franc' },\r\n    { code: 'BMD', name: 'Bermudian Dollar' },\r\n    { code: 'BND', name: 'Brunei Dollar' },\r\n    { code: 'BOB', name: 'Bolivian Boliviano' },\r\n    { code: 'BRL', name: 'Brazilian Real' },\r\n    { code: 'BSD', name: 'Bahamian Dollar' },\r\n    { code: 'BTN', name: 'Bhutanese Ngultrum' },\r\n    { code: 'BWP', name: 'Botswana Pula' },\r\n    { code: 'BYN', name: 'Belarusian Ruble' },\r\n    { code: 'BZD', name: 'Belize Dollar' },\r\n    { code: 'CAD', name: 'Canadian Dollar' },\r\n    { code: 'CDF', name: 'Congolese Franc' },\r\n    { code: 'CHF', name: 'Swiss Franc' },\r\n    { code: 'CLP', name: 'Chilean Peso' },\r\n    { code: 'CNY', name: 'Chinese Yuan' },\r\n    { code: 'COP', name: 'Colombian Peso' },\r\n    { code: 'CRC', name: 'Costa Rican Col\u00F3n' },\r\n    { code: 'CUP', name: 'Cuban Peso' },\r\n    { code: 'CVE', name: 'Cape Verdean Escudo' },\r\n    { code: 'CZK', name: 'Czech Koruna' },\r\n    { code: 'DJF', name: 'Djiboutian Franc' },\r\n    { code: 'DKK', name: 'Danish Krone' },\r\n    { code: 'DOP', name: 'Dominican Peso' },\r\n    { code: 'DZD', name: 'Algerian Dinar' },\r\n    { code: 'EGP', name: 'Egyptian Pound' },\r\n    { code: 'ERN', name: 'Eritrean Nakfa' },\r\n    { code: 'ETB', name: 'Ethiopian Birr' },\r\n    { code: 'EUR', name: 'Euro' },\r\n    { code: 'FJD', name: 'Fijian Dollar' },\r\n    { code: 'FKP', name: 'Falkland Islands Pound' },\r\n    { code: 'FOK', name: 'Faroese Kr\u00F3na' },\r\n    { code: 'GBP', name: 'British Pound Sterling' },\r\n    { code: 'GEL', name: 'Georgian Lari' },\r\n    { code: 'GGP', name: 'Guernsey Pound' },\r\n    { code: 'GHS', name: 'Ghanaian Cedi' },\r\n    { code: 'GIP', name: 'Gibraltar Pound' },\r\n    { code: 'GMD', name: 'Gambian Dalasi' },\r\n    { code: 'GNF', name: 'Guinean Franc' },\r\n    { code: 'GTQ', name: 'Guatemalan Quetzal' },\r\n    { code: 'GYD', name: 'Guyanese Dollar' },\r\n    { code: 'HKD', name: 'Hong Kong Dollar' },\r\n    { code: 'HNL', name: 'Honduran Lempira' },\r\n    { code: 'HRK', name: 'Croatian Kuna' },\r\n    { code: 'HTG', name: 'Haitian Gourde' },\r\n    { code: 'HUF', name: 'Hungarian Forint' },\r\n    { code: 'IDR', name: 'Indonesian Rupiah' },\r\n    { code: 'ILS', name: 'Israeli New Shekel' },\r\n    { code: 'IMP', name: 'Isle of Man Pound' },\r\n    { code: 'INR', name: 'Indian Rupee' },\r\n    { code: 'IQD', name: 'Iraqi Dinar' },\r\n    { code: 'IRR', name: 'Iranian Rial' },\r\n    { code: 'ISK', name: 'Icelandic Kr\u00F3na' },\r\n    { code: 'JEP', name: 'Jersey Pound' },\r\n    { code: 'JMD', name: 'Jamaican Dollar' },\r\n    { code: 'JOD', name: 'Jordanian Dinar' },\r\n    { code: 'JPY', name: 'Japanese Yen' },\r\n    { code: 'KES', name: 'Kenyan Shilling' },\r\n    { code: 'KGS', name: 'Kyrgystani Som' },\r\n    { code: 'KHR', name: 'Cambodian Riel' },\r\n    { code: 'KID', name: 'Kiribati Dollar' },\r\n    { code: 'KMF', name: 'Comorian Franc' },\r\n    { code: 'KRW', name: 'South Korean Won' },\r\n    { code: 'KWD', name: 'Kuwaiti Dinar' },\r\n    { code: 'KYD', name: 'Cayman Islands Dollar' },\r\n    { code: 'KZT', name: 'Kazakhstani Tenge' },\r\n    { code: 'LAK', name: 'Laotian Kip' },\r\n    { code: 'LBP', name: 'Lebanese Pound' },\r\n    { code: 'LKR', name: 'Sri Lankan Rupee' },\r\n    { code: 'LRD', name: 'Liberian Dollar' },\r\n    { code: 'LSL', name: 'Lesotho Loti' },\r\n    { code: 'LYD', name: 'Libyan Dinar' },\r\n    { code: 'MAD', name: 'Moroccan Dirham' },\r\n    { code: 'MDL', name: 'Moldovan Leu' },\r\n    { code: 'MGA', name: 'Malagasy Ariary' },\r\n    { code: 'MKD', name: 'Macedonian Denar' },\r\n    { code: 'MMK', name: 'Myanma Kyat' },\r\n    { code: 'MNT', name: 'Mongolian Tugrik' },\r\n    { code: 'MOP', name: 'Macanese Pataca' },\r\n    { code: 'MRU', name: 'Mauritanian Ouguiya' },\r\n    { code: 'MUR', name: 'Mauritian Rupee' },\r\n    { code: 'MVR', name: 'Maldivian Rufiyaa' },\r\n    { code: 'MWK', name: 'Malawian Kwacha' },\r\n    { code: 'MXN', name: 'Mexican Peso' },\r\n    { code: 'MYR', name: 'Malaysian Ringgit' },\r\n    { code: 'MZN', name: 'Mozambican Metical' },\r\n    { code: 'NAD', name: 'Namibian Dollar' },\r\n    { code: 'NGN', name: 'Nigerian Naira' },\r\n    { code: 'NIO', name: 'Nicaraguan C\u00F3rdoba' },\r\n    { code: 'NOK', name: 'Norwegian Krone' },\r\n    { code: 'NPR', name: 'Nepalese Rupee' },\r\n    { code: 'NZD', name: 'New Zealand Dollar' },\r\n    { code: 'OMR', name: 'Omani Rial' },\r\n    { code: 'PAB', name: 'Panamanian Balboa' },\r\n    { code: 'PEN', name: 'Peruvian Nuevo Sol' },\r\n    { code: 'PGK', name: 'Papua New Guinean Kina' },\r\n    { code: 'PHP', name: 'Philippine Peso' },\r\n    { code: 'PKR', name: 'Pakistani Rupee' },\r\n    { code: 'PLN', name: 'Polish Zloty' },\r\n    { code: 'PYG', name: 'Paraguayan Guarani' },\r\n    { code: 'QAR', name: 'Qatari Rial' },\r\n    { code: 'RON', name: 'Romanian Leu' },\r\n    { code: 'RSD', name: 'Serbian Dinar' },\r\n    { code: 'RUB', name: 'Russian Ruble' },\r\n    { code: 'RWF', name: 'Rwandan Franc' },\r\n    { code: 'SAR', name: 'Saudi Riyal' },\r\n    { code: 'SBD', name: 'Solomon Islands Dollar' },\r\n    { code: 'SCR', name: 'Seychellois Rupee' },\r\n    { code: 'SDG', name: 'Sudanese Pound' },\r\n    { code: 'SEK', name: 'Swedish Krona' },\r\n    { code: 'SGD', name: 'Singapore Dollar' },\r\n    { code: 'SHP', name: 'Saint Helena Pound' },\r\n    { code: 'SLE', name: 'Sierra Leonean Leone' },\r\n    { code: 'SLL', name: 'Sierra Leonean Leone' },\r\n    { code: 'SOS', name: 'Somali Shilling' },\r\n    { code: 'SRD', name: 'Surinamese Dollar' },\r\n    { code: 'SSP', name: 'South Sudanese Pound' },\r\n    { code: 'STN', name: 'S\u00E3o Tom\u00E9 and Pr\u00EDncipe Dobra' },\r\n    { code: 'SYP', name: 'Syrian Pound' },\r\n    { code: 'SZL', name: 'Swazi Lilangeni' },\r\n    { code: 'THB', name: 'Thai Baht' },\r\n    { code: 'TJS', name: 'Tajikistani Somoni' },\r\n    { code: 'TMT', name: 'Turkmenistani Manat' },\r\n    { code: 'TND', name: 'Tunisian Dinar' },\r\n    { code: 'TOP', name: 'Tongan Pa\u02BBanga' },\r\n    { code: 'TRY', name: 'Turkish Lira' },\r\n    { code: 'TTD', name: 'Trinidad and Tobago Dollar' },\r\n    { code: 'TVD', name: 'Tuvaluan Dollar' },\r\n    { code: 'TWD', name: 'New Taiwan Dollar' },\r\n    { code: 'TZS', name: 'Tanzanian Shilling' },\r\n    { code: 'UAH', name: 'Ukrainian Hryvnia' },\r\n    { code: 'UGX', name: 'Ugandan Shilling' },\r\n    { code: 'UYU', name: 'Uruguayan Peso' },\r\n    { code: 'UZS', name: 'Uzbekistani Som' },\r\n    { code: 'VES', name: 'Venezuelan Bol\u00EDvar Soberano' },\r\n    { code: 'VND', name: 'Vietnamese Dong' },\r\n    { code: 'VUV', name: 'Vanuatu Vatu' },\r\n    { code: 'WST', name: 'Samoan Tala' },\r\n    { code: 'XAF', name: 'Central African CFA Franc' },\r\n    { code: 'XCD', name: 'East Caribbean Dollar' },\r\n    { code: 'XDR', name: 'Special Drawing Rights' },\r\n    { code: 'XOF', name: 'West African CFA Franc' },\r\n    { code: 'XPF', name: 'CFP Franc' },\r\n    { code: 'YER', name: 'Yemeni Rial' },\r\n    { code: 'ZAR', name: 'South African Rand' },\r\n    { code: 'ZMW', name: 'Zambian Kwacha' },\r\n    { code: 'ZWL', name: 'Zimbabwean Dollar' }\r\n  ];"],
  "mappings": "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",
  "names": []
}
