{
  "version": 3,
  "sources": ["../app/entry.server.tsx", "../app/root.tsx", "../app/auth.server.ts", "../app/db.server.ts", "../app/components/Nav.tsx", "../app/routes/minimizacion-transacciones.tsx", "../app/utils/primAlgorithm.ts", "../app/utils/excelExport.ts", "../app/routes/optimizacion-divisas.tsx", "../app/types/currencyExchange.ts", "../app/routes/register.tsx", "../app/routes/logout.tsx", "../app/routes/_index.tsx", "../app/utils/floydWarshall.ts", "../app/utils/calculateIndividualSplits.ts", "../app/utils/calculateSplits.ts", "../app/utils/translations.ts", "../app/actions/expenses.server.ts", "../app/utils/invitations.ts", "../app/actions/juntas.server.ts", "../app/components/NotificationInbox.tsx", "../app/routes/login.tsx", "server-assets-manifest:@remix-run/dev/assets-manifest", "server-entry-module:@remix-run/dev/server-build"],
  "sourcesContent": ["/**\n * By default, Remix will handle generating the HTTP Response for you.\n * You are free to delete this file if you'd like to, but if you ever want it revealed again, you can run `npx remix reveal` \u2728\n * For more information, see https://remix.run/file-conventions/entry.server\n */\n\nimport { PassThrough } from \"node:stream\";\nimport { config } from 'dotenv';\nimport { fileURLToPath } from 'url';\nimport { dirname, resolve } from 'path';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\n\nconfig({ path: resolve(__dirname, '../.env') });\n\nconsole.log('DATABASE_URL:', process.env.DATABASE_URL);\nconsole.log('SESSION_SECRET:', process.env.SESSION_SECRET);\n\nimport type { AppLoadContext, EntryContext } from \"@remix-run/node\";\nimport { createReadableStreamFromReadable } from \"@remix-run/node\";\nimport { RemixServer } from \"@remix-run/react\";\nimport { isbot } from \"isbot\";\nimport { renderToPipeableStream } from \"react-dom/server\";\n\nconst ABORT_DELAY = 5_000;\n\nexport default function handleRequest(\n  request: Request,\n  responseStatusCode: number,\n  responseHeaders: Headers,\n  remixContext: EntryContext,\n  // This is ignored so we can keep it in the template for visibility.  Feel\n  // free to delete this parameter in your app if you're not using it!\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  loadContext: AppLoadContext\n) {\n  return isbot(request.headers.get(\"user-agent\") || \"\")\n    ? handleBotRequest(\n        request,\n        responseStatusCode,\n        responseHeaders,\n        remixContext\n      )\n    : handleBrowserRequest(\n        request,\n        responseStatusCode,\n        responseHeaders,\n        remixContext\n      );\n}\n\nfunction handleBotRequest(\n  request: Request,\n  responseStatusCode: number,\n  responseHeaders: Headers,\n  remixContext: EntryContext\n) {\n  return new Promise((resolve, reject) => {\n    let shellRendered = false;\n    const { pipe, abort } = renderToPipeableStream(\n      <RemixServer\n        context={remixContext}\n        url={request.url}\n        abortDelay={ABORT_DELAY}\n      />,\n      {\n        onAllReady() {\n          shellRendered = true;\n          const body = new PassThrough();\n          const stream = createReadableStreamFromReadable(body);\n\n          responseHeaders.set(\"Content-Type\", \"text/html\");\n\n          resolve(\n            new Response(stream, {\n              headers: responseHeaders,\n              status: responseStatusCode,\n            })\n          );\n\n          pipe(body);\n        },\n        onShellError(error: unknown) {\n          reject(error);\n        },\n        onError(error: unknown) {\n          responseStatusCode = 500;\n          // Log streaming rendering errors from inside the shell.  Don't log\n          // errors encountered during initial shell rendering since they'll\n          // reject and get logged in handleDocumentRequest.\n          if (shellRendered) {\n            console.error(error);\n          }\n        },\n      }\n    );\n\n    setTimeout(abort, ABORT_DELAY);\n  });\n}\n\nfunction handleBrowserRequest(\n  request: Request,\n  responseStatusCode: number,\n  responseHeaders: Headers,\n  remixContext: EntryContext\n) {\n  return new Promise((resolve, reject) => {\n    let shellRendered = false;\n    const { pipe, abort } = renderToPipeableStream(\n      <RemixServer\n        context={remixContext}\n        url={request.url}\n        abortDelay={ABORT_DELAY}\n      />,\n      {\n        onShellReady() {\n          shellRendered = true;\n          const body = new PassThrough();\n          const stream = createReadableStreamFromReadable(body);\n\n          responseHeaders.set(\"Content-Type\", \"text/html\");\n\n          resolve(\n            new Response(stream, {\n              headers: responseHeaders,\n              status: responseStatusCode,\n            })\n          );\n\n          pipe(body);\n        },\n        onShellError(error: unknown) {\n          reject(error);\n        },\n        onError(error: unknown) {\n          responseStatusCode = 500;\n          // Log streaming rendering errors from inside the shell.  Don't log\n          // errors encountered during initial shell rendering since they'll\n          // reject and get logged in handleDocumentRequest.\n          if (shellRendered) {\n            console.error(error);\n          }\n        },\n      }\n    );\n\n    setTimeout(abort, ABORT_DELAY);\n  });\n}\n", "import { json, LinksFunction, LoaderFunction, MetaFunction } from \"@remix-run/node\";\nimport {\n  Links,\n  LiveReload,\n  Meta,\n  Outlet,\n  Scripts,\n  ScrollRestoration,\n  useLoaderData } from\n\"@remix-run/react\";\nimport styles from \"./styles/tailwind.css\";\nimport { getUser } from \"./auth.server\";\nimport Nav from \"./components/Nav\";\n\nexport const links: LinksFunction = () => [\n{ rel: \"stylesheet\", href: styles }];\n\n\nexport const meta: MetaFunction = () => [\n{ charset: \"utf-8\" },\n{ title: \"Expense Splitter\" },\n{ name: \"viewport\", content: \"width=device-width,initial-scale=1\" }];\n\n\nexport const loader: LoaderFunction = async ({ request }) => {\n  const user = await getUser(request);\n  return json({ user });\n};\n\nexport default function App() {\n  const { user } = useLoaderData<typeof loader>();\n\n  return (\n    <html lang=\"en\" className=\"h-full\">\r\n      <head>\r\n        <Meta />\r\n        <Links />\r\n      </head>\r\n      <body className=\"h-full\">\r\n        <Nav user={user} />\r\n        <main className=\"container mx-auto p-4 mt-8\">\r\n          <Outlet />\r\n        </main>\r\n        <ScrollRestoration />\r\n        <Scripts />\r\n        <LiveReload /> \r\n      </body>\r\n    </html>);\n\n}", "import { createCookieSessionStorage, redirect } from \"@remix-run/node\";\r\nimport bcrypt from \"bcryptjs\";\r\nimport { db } from \"./db.server\";\r\n\r\ntype LoginForm = {\r\n  username: string;\r\n  password: string;\r\n};\r\n\r\nexport async function register({ username, password }: LoginForm) {\r\n  const passwordHash = await bcrypt.hash(password, 10);\r\n  const user = await db.user.create({\r\n    data: { username, passwordHash },\r\n  });\r\n  return { id: user.id, username };\r\n}\r\n\r\nexport async function login({ username, password }: LoginForm) {\r\n  const user = await db.user.findUnique({\r\n    where: { username },\r\n  });\r\n  if (!user) return null;\r\n  const isCorrectPassword = await bcrypt.compare(password, user.passwordHash);\r\n  if (!isCorrectPassword) return null;\r\n  return { id: user.id, username };\r\n}\r\n\r\n// Manejo m\u00E1s robusto de SESSION_SECRET\r\nconst sessionSecret = process.env.SESSION_SECRET;\r\nif (!sessionSecret) {\r\n  throw new Error(\"SESSION_SECRET must be set\");\r\n}\r\n\r\nconst storage = createCookieSessionStorage({\r\n  cookie: {\r\n    name: \"RJ_session\",\r\n    secure: process.env.NODE_ENV === \"production\",\r\n    secrets: [sessionSecret],\r\n    sameSite: \"lax\",\r\n    path: \"/\",\r\n    maxAge: 60 * 60 * 24 * 30,\r\n    httpOnly: true,\r\n  },\r\n});\r\n\r\nexport async function createUserSession(userId: string, redirectTo: string, isNewUser: boolean = false) {\r\n  const session = await storage.getSession();\r\n  session.set(\"userId\", userId);\r\n  session.set(\"isNewUser\", isNewUser);\r\n  return redirect(redirectTo, {\r\n    headers: {\r\n      \"Set-Cookie\": await storage.commitSession(session),\r\n    },\r\n  });\r\n}\r\n\r\nexport function getUserSession(request: Request) {\r\n  return storage.getSession(request.headers.get(\"Cookie\"));\r\n}\r\n\r\nexport async function getUserId(request: Request) {\r\n  const session = await getUserSession(request);\r\n  const userId = session.get(\"userId\");\r\n  if (!userId || typeof userId !== \"string\") return null;\r\n  return userId;\r\n}\r\n\r\nexport async function requireUserId(\r\n  request: Request,\r\n  redirectTo: string = new URL(request.url).pathname\r\n) {\r\n  const session = await getUserSession(request);\r\n  const userId = session.get(\"userId\");\r\n  if (!userId || typeof userId !== \"string\") {\r\n    const searchParams = new URLSearchParams([[\"redirectTo\", redirectTo]]);\r\n    throw redirect(`/login?${searchParams}`);\r\n  }\r\n  return userId;\r\n}\r\n\r\nexport async function getUser(request: Request) {\r\n  const userId = await getUserId(request);\r\n  if (typeof userId !== \"string\") {\r\n    return null;\r\n  }\r\n\r\n  try {\r\n    const user = await db.user.findUnique({\r\n      where: { id: userId },\r\n      select: { id: true, username: true },\r\n    });\r\n    const session = await getUserSession(request);\r\n    const isNewUser = session.get(\"isNewUser\");\r\n    return user ? { ...user, isNewUser } : null;\r\n  } catch {\r\n    throw logout(request);\r\n  }\r\n}\r\n\r\nexport async function logout(request: Request) {\r\n  const session = await getUserSession(request);\r\n  return redirect(\"/login\", {\r\n    headers: {\r\n      \"Set-Cookie\": await storage.destroySession(session),\r\n    },\r\n  });\r\n}", "import { PrismaClient } from \"@prisma/client\";\r\nimport { config } from 'dotenv';\r\nimport { fileURLToPath } from 'url';\r\nimport { dirname, resolve } from 'path';\r\n\r\nconst __filename = fileURLToPath(import.meta.url);\r\nconst __dirname = dirname(__filename);\r\n\r\n// Carga las variables de entorno\r\nconfig({ path: resolve(__dirname, '../.env') });\r\n\r\nconsole.log('DATABASE_URL in db.server.ts:', process.env.DATABASE_URL);\r\n\r\nlet db: PrismaClient;\r\n\r\ndeclare global {\r\n  var __db: PrismaClient | undefined;\r\n}\r\n\r\nconsole.log(\"Initializing database connection\");\r\nif (process.env.NODE_ENV === \"production\") {\r\n  console.log(\"Production mode: Creating new PrismaClient\");\r\n  db = new PrismaClient();\r\n} else {\r\n  if (!global.__db) {\r\n    console.log(\"Development mode: Creating new PrismaClient\");\r\n    global.__db = new PrismaClient();\r\n  } else {\r\n    console.log(\"Development mode: Reusing existing PrismaClient\");\r\n  }\r\n  db = global.__db;\r\n}\r\n\r\ntry {\r\n  console.log(\"Attempting to connect to the database\");\r\n  db.$connect();\r\n  console.log(\"Database connected successfully\");\r\n  console.log(\"Available models:\", Object.keys(db));\r\n} catch (error) {\r\n  console.error(\"Failed to connect to the database:\", error);\r\n}\r\n\r\nexport { db };", "import { Link } from \"@remix-run/react\";\r\n\r\nexport default function Nav({ user }: { user: { username: string } | null }) {\r\n  return (\r\n    <nav className=\"bg-gray-800 p-4\">\r\n      <div className=\"container mx-auto flex justify-between items-center\">\r\n        <Link to=\"/\" className=\"text-white text-xl font-bold\">\r\n          Expense Splitter\r\n        </Link>\r\n        <div>\r\n          {user ? (\r\n            <>\r\n              <span className=\"text-white mr-4\">Welcome, {user.username}!</span>\r\n              <Link to=\"/minimizacion-transacciones\" className=\"text-white mr-4\">\r\n                Optimizaci\u00F3n de Transferencias\r\n              </Link>\r\n              <Link to=\"/optimizacion-divisas\" className=\"text-white mr-4\">\r\n                Optimizaci\u00F3n de Divisas\r\n              </Link>\r\n            </>\r\n          ) : (\r\n            <>\r\n              <Link to=\"/login\" className=\"text-white mr-4\">\r\n                Login\r\n              </Link>\r\n              <Link to=\"/register\" className=\"text-white\">\r\n                Register\r\n              </Link>\r\n            </>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}", "import { useState } from 'react';\r\nimport { Form, useActionData, useSubmit } from '@remix-run/react';\r\nimport { json, ActionFunction } from '@remix-run/node';\r\nimport { primAlgorithm, Account, Transfer } from '../utils/primAlgorithm';\r\nimport { exportToExcel } from '../utils/excelExport';\r\n\r\nexport const action: ActionFunction = async ({ request }) => {\r\n  const formData = await request.formData();\r\n  const accounts = JSON.parse(formData.get('accounts') as string);\r\n  const result = primAlgorithm(accounts);\r\n  return json({ result });\r\n};\r\n\r\nexport default function MinimizacionTransacciones() {\r\n  const actionData = useActionData<{ result: Transfer[] } | undefined>();\r\n  const submit = useSubmit();\r\n  const [accounts, setAccounts] = useState<Account[]>([{ name: '', balance: 0 }]);\r\n\r\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\r\n    event.preventDefault();\r\n    submit({ accounts: JSON.stringify(accounts) }, { method: 'post' });\r\n  };\r\n\r\n  const handleAddAccount = () => {\r\n    setAccounts([...accounts, { name: '', balance: 0 }]);\r\n  };\r\n\r\n  const handleAccountChange = (index: number, field: 'name' | 'balance', value: string) => {\r\n    const newAccounts = [...accounts];\r\n    newAccounts[index] = {\r\n      ...newAccounts[index],\r\n      [field]: field === 'balance' ? parseFloat(value) : value\r\n    };\r\n    setAccounts(newAccounts);\r\n  };\r\n\r\n  const handleExport = () => {\r\n    if (actionData?.result) {\r\n      exportToExcel(actionData.result, 'Minimizacion_Transacciones');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"container mx-auto p-4\">\r\n      <h1 className=\"text-2xl font-bold mb-4\">Minimizaci\u00F3n de Costos de Transacciones Bancarias</h1>\r\n      <Form method=\"post\" onSubmit={handleSubmit}>\r\n        {accounts.map((account, index) => (\r\n          <div key={index} className=\"mb-4\">\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Nombre de la cuenta\"\r\n              value={account.name}\r\n              onChange={(e) => handleAccountChange(index, 'name', e.target.value)}\r\n              className=\"mr-2 p-2 border rounded\"\r\n            />\r\n            <input\r\n              type=\"number\"\r\n              placeholder=\"Balance\"\r\n              value={account.balance}\r\n              onChange={(e) => handleAccountChange(index, 'balance', e.target.value)}\r\n              className=\"p-2 border rounded\"\r\n            />\r\n          </div>\r\n        ))}\r\n        <button type=\"button\" onClick={handleAddAccount} className=\"mb-4 p-2 bg-blue-500 text-white rounded\">\r\n          Agregar Cuenta\r\n        </button>\r\n        <button type=\"submit\" className=\"p-2 bg-green-500 text-white rounded\">\r\n          Calcular\r\n        </button>\r\n      </Form>\r\n      {actionData?.result && (\r\n        <div className=\"mt-4\">\r\n          <h2 className=\"text-xl font-bold mb-2\">Resultados</h2>\r\n          <pre>{JSON.stringify(actionData.result, null, 2)}</pre>\r\n          <button onClick={handleExport} className=\"mt-2 p-2 bg-yellow-500 text-white rounded\">\r\n            Exportar a Excel\r\n          </button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n", "export interface Account {\r\n  name: string;\r\n  balance: number;\r\n}\r\n\r\nexport interface Transfer {\r\n  from: string;\r\n  to: string;\r\n  amount: number;\r\n}\r\n\r\nexport function primAlgorithm(accounts: Account[]): Transfer[] {\r\n    const transfers: Transfer[] = [];\r\n    const n = accounts.length;\r\n    const visited = new Array(n).fill(false);\r\n    const totalBalance = accounts.reduce((sum, account) => sum + account.balance, 0);\r\n    const averageBalance = totalBalance / n;\r\n\r\n    visited[0] = true;\r\n\r\n    for (let i = 0; i < n - 1; i++) {\r\n        let minCost = Infinity;\r\n        let fromIndex = -1;\r\n        let toIndex = -1;\r\n\r\n        for (let j = 0; j < n; j++) {\r\n            if (visited[j]) {\r\n                for (let k = 0; k < n; k++) {\r\n                    if (!visited[k]) {\r\n                        const amount = Math.min(\r\n                            Math.abs(accounts[j].balance - averageBalance),\r\n                            Math.abs(accounts[k].balance - averageBalance)\r\n                        );\r\n                        if (amount < minCost) {\r\n                            minCost = amount;\r\n                            fromIndex = j;\r\n                            toIndex = k;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (fromIndex !== -1 && toIndex !== -1) {\r\n            const amount = minCost;\r\n            transfers.push({\r\n                from: accounts[fromIndex].name,\r\n                to: accounts[toIndex].name,\r\n                amount: Number(amount.toFixed(2))\r\n            });\r\n            accounts[fromIndex].balance -= amount;\r\n            accounts[toIndex].balance += amount;\r\n            visited[toIndex] = true;\r\n        }\r\n    }\r\n\r\n    return transfers;\r\n}", "import * as XLSX from 'xlsx';\r\n\r\nexport function exportToExcel(data: any[], fileName: string) {\r\n  const ws = XLSX.utils.json_to_sheet(data);\r\n  const wb = XLSX.utils.book_new();\r\n\r\n  // Add some styling\r\n  const headerStyle = {\r\n    font: { bold: true, color: { rgb: \"FFFFFF\" } },\r\n    fill: { fgColor: { rgb: \"4F81BD\" } }\r\n  };\r\n\r\n  const evenRowStyle = {\r\n    fill: { fgColor: { rgb: \"E9EDF1\" } }\r\n  };\r\n\r\n  const oddRowStyle = {\r\n    fill: { fgColor: { rgb: \"D3DFEE\" } }\r\n  };\r\n\r\n  // Apply styles to the header row\r\n  const range = XLSX.utils.decode_range(ws['!ref']!);\r\n  for (let C = range.s.c; C <= range.e.c; ++C) {\r\n    const address = XLSX.utils.encode_col(C) + \"1\";\r\n    if (!ws[address]) continue;\r\n    ws[address].s = headerStyle;\r\n  }\r\n\r\n  // Apply alternating row styles\r\n  for (let R = range.s.r + 1; R <= range.e.r; ++R) {\r\n    for (let C = range.s.c; C <= range.e.c; ++C) {\r\n      const address = XLSX.utils.encode_cell({r: R, c: C});\r\n      if (!ws[address]) continue;\r\n      ws[address].s = R % 2 === 0 ? evenRowStyle : oddRowStyle;\r\n    }\r\n  }\r\n\r\n  // Auto-size columns\r\n  const colWidths = data.reduce((acc, row) => {\r\n    Object.keys(row).forEach((key, i) => {\r\n      const cellValue = row[key] ? row[key].toString() : '';\r\n      acc[i] = Math.max(acc[i] || 0, cellValue.length);\r\n    });\r\n    return acc;\r\n  }, {});\r\n\r\n  ws['!cols'] = Object.keys(colWidths).map(i => ({ wch: colWidths[i] }));\r\n\r\n  XLSX.utils.book_append_sheet(wb, ws, \"Optimal Conversion Path\");\r\n  XLSX.writeFile(wb, `${fileName}.xlsx`);\r\n}", "import { useState } from 'react';\r\nimport { Form, useActionData, useNavigation, useSubmit } from '@remix-run/react';\r\nimport { json, ActionFunction } from '@remix-run/node';\r\nimport { findBestConversionPath } from '../types/currencyExchange';\r\nimport { ExchangeHouse, ConversionResult } from '../types/exchangeTypes';\r\nimport { exportToExcel } from '../utils/excelExport';\r\n\r\nexport default function OptimizacionDivisas() {\r\n  const [amount, setAmount] = useState<number>(1000);\r\n  const [currency, setCurrency] = useState<string>('USD');\r\n  const [exchangeHouses, setExchangeHouses] = useState<ExchangeHouse[]>([]);\r\n  const [maxSteps, setMaxSteps] = useState<number>(5);\r\n  const [allowRepetitions, setAllowRepetitions] = useState<boolean>(false);\r\n\r\n  const actionData = useActionData<{ result: ConversionResult }>();\r\n  const navigation = useNavigation();\r\n  const submit = useSubmit();\r\n\r\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    const formData = new FormData();\r\n    formData.append('amount', amount.toString());\r\n    formData.append('currency', currency);\r\n    formData.append('exchangeHouses', JSON.stringify(exchangeHouses));\r\n    formData.append('maxSteps', maxSteps.toString());\r\n    formData.append('allowRepetitions', allowRepetitions.toString());\r\n    submit(formData, { method: 'post' });\r\n  };\r\n\r\n  const addExchangeHouse = () => {\r\n    setExchangeHouses([...exchangeHouses, { name: '', exchanges: [] }]);\r\n  };\r\n\r\n  const updateExchangeHouse = (index: number, house: ExchangeHouse) => {\r\n    const newHouses = [...exchangeHouses];\r\n    newHouses[index] = house;\r\n    setExchangeHouses(newHouses);\r\n  };\r\n\r\n  const handleExportToExcel = () => {\r\n    if (actionData?.result) {\r\n      const data = [\r\n        { Step: 'Initial', Amount: actionData.result.initialAmount, Currency: currency },\r\n        ...actionData.result.path.map((step, index) => ({\r\n          Step: index + 1,\r\n          Amount: step.toAmount,\r\n          Currency: step.to,\r\n          ExchangeHouse: step.exchangeHouse,\r\n          Rate: step.rate,\r\n          Operation: step.isBuy ? 'Compra' : 'Venta'\r\n        })),\r\n        { Step: 'Final', Amount: actionData.result.finalAmountInUSD, Currency: actionData.result.path[actionData.result.path.length - 1].to }\r\n      ];\r\n      exportToExcel(data, 'OptimalConversionPath');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"container mx-auto p-4 max-w-4xl bg-gray-100 rounded-lg shadow-lg\">\r\n      <h1 className=\"text-3xl font-bold mb-6 text-center text-blue-600\">Optimizaci\u00F3n de Conversi\u00F3n de Divisas</h1>\r\n\r\n      <Form onSubmit={handleSubmit} className=\"mb-8 space-y-6\">\r\n        <div className=\"grid grid-cols-2 gap-4\">\r\n          <div className=\"bg-white p-4 rounded-lg shadow\">\r\n            <label htmlFor=\"amount\" className=\"block text-sm font-medium text-gray-700 mb-2\">Cantidad inicial:</label>\r\n            <input\r\n              type=\"number\"\r\n              id=\"amount\"\r\n              value={amount}\r\n              onChange={(e) => setAmount(Number(e.target.value))}\r\n              className=\"w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500\"\r\n            />\r\n            <p className=\"mt-2 text-sm text-gray-500\">Ingrese la cantidad de dinero con la que desea iniciar la operaci\u00F3n.</p>\r\n          </div>\r\n          <div className=\"bg-white p-4 rounded-lg shadow\">\r\n            <label htmlFor=\"currency\" className=\"block text-sm font-medium text-gray-700 mb-2\">Moneda inicial:</label>\r\n            <input\r\n              type=\"text\"\r\n              id=\"currency\"\r\n              value={currency}\r\n              onChange={(e) => setCurrency(e.target.value)}\r\n              className=\"w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500\"\r\n            />\r\n            <p className=\"mt-2 text-sm text-gray-500\">Ingrese el c\u00F3digo de la moneda inicial (ej. USD, EUR, PEN).</p>\r\n          </div>\r\n        </div>\r\n        <div className=\"bg-white p-4 rounded-lg shadow\">\r\n          <label htmlFor=\"maxSteps\" className=\"block text-sm font-medium text-gray-700 mb-2\">M\u00E1ximo de pasos:</label>\r\n          <input\r\n            type=\"number\"\r\n            id=\"maxSteps\"\r\n            value={maxSteps}\r\n            onChange={(e) => setMaxSteps(Number(e.target.value))}\r\n            className=\"w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500\"\r\n          />\r\n          <p className=\"mt-2 text-sm text-gray-500\">N\u00FAmero m\u00E1ximo de conversiones permitidas en la ruta.</p>\r\n        </div>\r\n        <div className=\"bg-white p-4 rounded-lg shadow\">\r\n          <h2 className=\"text-xl font-bold mb-4 text-blue-600\">Casas de Cambio</h2>\r\n          {exchangeHouses.map((house, index) => (\r\n            <ExchangeHouseInput\r\n              key={index}\r\n              house={house}\r\n              onChange={(updatedHouse) => updateExchangeHouse(index, updatedHouse)}\r\n            />\r\n          ))}\r\n          <button type=\"button\" onClick={addExchangeHouse} className=\"mt-4 bg-green-500 text-white p-2 rounded hover:bg-green-600 transition duration-300\">\r\n            Agregar Casa de Cambio\r\n          </button>\r\n        </div>\r\n        <div className=\"flex items-center\">\r\n          <input\r\n            type=\"checkbox\"\r\n            id=\"allowRepetitions\"\r\n            checked={allowRepetitions}\r\n            onChange={(e) => setAllowRepetitions(e.target.checked)}\r\n            className=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded\"\r\n          />\r\n          <label htmlFor=\"allowRepetitions\" className=\"ml-2 block text-sm text-gray-900\">\r\n            Permitir repeticiones de monedas en la ruta\r\n          </label>\r\n        </div>\r\n        <button type=\"submit\" className=\"w-full bg-blue-500 text-white p-3 rounded-lg hover:bg-blue-600 transition duration-300\">\r\n          Calcular ruta \u00F3ptima\r\n        </button>\r\n      </Form>\r\n\r\n      {actionData?.result && (\r\n        <div className=\"mt-8 bg-white p-6 rounded-lg shadow\">\r\n          <h2 className=\"text-2xl font-bold mb-4 text-blue-600\">Resultado \u00D3ptimo</h2>\r\n          <p className=\"text-lg\">Ganancia: <span className={`font-bold ${actionData.result.profit >= 0 ? 'text-green-600' : 'text-red-600'}`}>${actionData.result.profit.toFixed(2)} USD</span> ({actionData.result.profitPercentage.toFixed(2)}%)</p>\r\n          <p className=\"text-lg\">Cantidad inicial: ${actionData.result.initialAmount.toFixed(2)} {currency}</p>\r\n          <p className=\"text-lg\">Cantidad final: ${actionData.result.finalAmountInUSD.toFixed(2)} USD</p>\r\n          <h3 className=\"text-xl font-bold mt-6 mb-2 text-blue-600\">Pasos:</h3>\r\n          <ol className=\"list-decimal list-inside space-y-2\">\r\n            {actionData.result.path.map((step, index) => (\r\n              <li key={index} className=\"bg-gray-100 p-2 rounded\">\r\n                <span className=\"font-bold\">{step.exchangeHouse}:</span> {step.fromAmount.toFixed(2)} {step.from} \u2192 {step.toAmount.toFixed(2)} {step.to}\r\n                <span className=\"text-sm text-gray-600 ml-2\">({step.isBuy ? 'Compra' : 'Venta'}, Tasa: {step.rate.toFixed(4)})</span>\r\n              </li>\r\n            ))}\r\n          </ol>\r\n          <h3 className=\"text-xl font-bold mt-6 mb-2 text-blue-600\">Otras rutas posibles:</h3>\r\n          <ul className=\"list-disc list-inside space-y-1\">\r\n            {actionData.result.allPaths.slice(0, 5).map((path, index) => (\r\n              <li key={index}>\r\n                Ganancia: ${path.profit.toFixed(2)} USD ({path.profitPercentage.toFixed(2)}%)\r\n              </li>\r\n            ))}\r\n          </ul>\r\n          <button onClick={handleExportToExcel} className=\"mt-6 bg-green-500 text-white p-2 rounded hover:bg-green-600 transition duration-300\">\r\n            Exportar a Excel\r\n          </button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction ExchangeHouseInput({ house, onChange }: { house: ExchangeHouse, onChange: (house: ExchangeHouse) => void }) {\r\n  const addExchange = () => {\r\n    onChange({ ...house, exchanges: [...house.exchanges, { fromCurrency: '', toCurrency: '', buyRate: 0, sellRate: 0 }] });\r\n  };\r\n\r\n  const updateExchange = (index: number, exchange: { fromCurrency: string; toCurrency: string; buyRate: number; sellRate: number }) => {\r\n    const newExchanges = [...house.exchanges];\r\n    newExchanges[index] = exchange;\r\n    onChange({ ...house, exchanges: newExchanges });\r\n  };\r\n\r\n  return (\r\n    <div className=\"border p-4 rounded mb-4 bg-gray-50\">\r\n      <input\r\n        type=\"text\"\r\n        value={house.name}\r\n        onChange={(e) => onChange({ ...house, name: e.target.value })}\r\n        placeholder=\"Nombre de la casa de cambio\"\r\n        className=\"w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 mb-2\"\r\n      />\r\n      {house.exchanges.map((exchange, index) => (\r\n        <div key={index} className=\"flex flex-wrap -mx-2 mb-2\">\r\n          <div className=\"px-2 w-1/4\">\r\n            <input\r\n              type=\"text\"\r\n              value={exchange.fromCurrency}\r\n              onChange={(e) => updateExchange(index, { ...exchange, fromCurrency: e.target.value })}\r\n              placeholder=\"De\"\r\n              className=\"w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500\"\r\n            />\r\n          </div>\r\n          <div className=\"px-2 w-1/4\">\r\n            <input\r\n              type=\"text\"\r\n              value={exchange.toCurrency}\r\n              onChange={(e) => updateExchange(index, { ...exchange, toCurrency: e.target.value })}\r\n              placeholder=\"A\"\r\n              className=\"w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500\"\r\n            />\r\n          </div>\r\n          <div className=\"px-2 w-1/4\">\r\n            <input\r\n              type=\"number\"\r\n              value={exchange.buyRate || ''}\r\n              onChange={(e) => updateExchange(index, { ...exchange, buyRate: Number(e.target.value) })}\r\n              placeholder=\"Tasa de compra\"\r\n              className=\"w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500\"\r\n            />\r\n          </div>\r\n          <div className=\"px-2 w-1/4\">\r\n            <input\r\n              type=\"number\"\r\n              value={exchange.sellRate || ''}\r\n              onChange={(e) => updateExchange(index, { ...exchange, sellRate: Number(e.target.value) })}\r\n              placeholder=\"Tasa de venta\"\r\n              className=\"w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500\"\r\n            />\r\n          </div>\r\n        </div>\r\n      ))}\r\n      <button type=\"button\" onClick={addExchange} className=\"bg-blue-500 text-white p-2 rounded hover:bg-blue-600 transition duration-300\">\r\n        Agregar Cambio\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport const action: ActionFunction = async ({ request }) => {\r\n  const formData = await request.formData();\r\n  const amount = Number(formData.get('amount'));\r\n  const currency = formData.get('currency') as string;\r\n  const exchangeHouses = JSON.parse(formData.get('exchangeHouses') as string) as ExchangeHouse[];\r\n  const maxSteps = Number(formData.get('maxSteps'));\r\n  const allowRepetitions = formData.get('allowRepetitions') === 'true';\r\n\r\n  console.log('Input data:', JSON.stringify({ amount, currency, exchangeHouses, maxSteps, allowRepetitions }, null, 2));\r\n\r\n  const result = findBestConversionPath(amount, currency, exchangeHouses, maxSteps, allowRepetitions);\r\n  \r\n  console.log('Result:', JSON.stringify(result, null, 2));\r\n\r\n  return json({ result });\r\n};", "import { ExchangeHouse, Exchange, ConversionStep, ConversionResult } from '../types/exchangeTypes';\r\n\r\nfunction findBestConversionPath(\r\n  initialAmount: number,\r\n  initialCurrency: string,\r\n  exchangeHouses: ExchangeHouse[],\r\n  maxSteps: number,\r\n  allowRepetitions: boolean\r\n): ConversionResult {\r\n  const currencies = new Set<string>();\r\n  exchangeHouses.forEach(house => \r\n    house.exchanges.forEach(exchange => {\r\n      currencies.add(exchange.fromCurrency);\r\n      currencies.add(exchange.toCurrency);\r\n    })\r\n  );\r\n  const currencyList = Array.from(currencies);\r\n  \r\n  // Inicializar las estructuras de datos\r\n  const graph: { [key: string]: { [key: string]: { rate: number, exchangeHouse: string } } } = {};\r\n  currencyList.forEach(currency => {\r\n    graph[currency] = {};\r\n    currencyList.forEach(otherCurrency => {\r\n      graph[currency][otherCurrency] = { rate: currency === otherCurrency ? 1 : 0, exchangeHouse: '' };\r\n    });\r\n  });\r\n\r\n  // Llenar el grafo con las tasas de cambio\r\n  exchangeHouses.forEach(house => {\r\n    house.exchanges.forEach(exchange => {\r\n      graph[exchange.fromCurrency][exchange.toCurrency] = { rate: exchange.sellRate, exchangeHouse: house.name };\r\n      graph[exchange.toCurrency][exchange.fromCurrency] = { rate: 1 / exchange.buyRate, exchangeHouse: house.name };\r\n    });\r\n  });\r\n\r\n  let bestResult: ConversionResult = {\r\n    path: [],\r\n    initialAmount,\r\n    finalAmount: initialAmount,\r\n    finalAmountInUSD: initialAmount,\r\n    profit: 0,\r\n    profitPercentage: 0,\r\n    allPaths: []\r\n  };\r\n\r\n  function dfs(currentCurrency: string, currentAmount: number, path: ConversionStep[], visited: Set<string>) {\r\n    if (path.length > 0) {\r\n      const finalAmountInUSD = currentCurrency === 'USD' ? currentAmount : currentAmount * graph[currentCurrency]['USD'].rate;\r\n      const profit = finalAmountInUSD - initialAmount;\r\n      const profitPercentage = (profit / initialAmount) * 100;\r\n\r\n      const currentResult: ConversionResult = {\r\n        path: [...path],\r\n        initialAmount,\r\n        finalAmount: currentAmount,\r\n        finalAmountInUSD,\r\n        profit,\r\n        profitPercentage,\r\n        allPaths: []\r\n      };\r\n\r\n      bestResult.allPaths.push(currentResult);\r\n\r\n      if (profit > bestResult.profit) {\r\n        bestResult = currentResult;\r\n      }\r\n    }\r\n\r\n    if (path.length >= maxSteps) return;\r\n\r\n    for (const nextCurrency in graph[currentCurrency]) {\r\n      if (!allowRepetitions && visited.has(nextCurrency)) continue;\r\n\r\n      const { rate, exchangeHouse } = graph[currentCurrency][nextCurrency];\r\n      if (rate === 0) continue;\r\n\r\n      const nextAmount = currentAmount * rate;\r\n      const step: ConversionStep = {\r\n        exchangeHouse,\r\n        from: currentCurrency,\r\n        to: nextCurrency,\r\n        fromAmount: currentAmount,\r\n        toAmount: nextAmount,\r\n        rate,\r\n        isBuy: false\r\n      };\r\n\r\n      path.push(step);\r\n      visited.add(nextCurrency);\r\n\r\n      dfs(nextCurrency, nextAmount, path, new Set(visited));\r\n\r\n      path.pop();\r\n      visited.delete(nextCurrency);\r\n    }\r\n  }\r\n\r\n  dfs(initialCurrency, initialAmount, [], new Set([initialCurrency]));\r\n\r\n  return bestResult;\r\n}\r\n\r\nexport { findBestConversionPath };", "import { ActionFunction, json, LoaderFunction, redirect } from \"@remix-run/node\";\r\nimport { Form, useActionData, useLoaderData } from \"@remix-run/react\";\r\nimport { createUserSession, getUser, register } from \"~/auth.server\";\r\nimport { db } from \"~/db.server\";\r\n\r\nexport const loader: LoaderFunction = async ({ request }) => {\r\n  const user = await getUser(request);\r\n  if (user) return redirect(\"/\");\r\n  return json({});\r\n};\r\n\r\nexport const action: ActionFunction = async ({ request }) => {\r\n  const form = await request.formData();\r\n  const username = form.get(\"username\");\r\n  const password = form.get(\"password\");\r\n  const redirectTo = form.get(\"redirectTo\") || \"/\";\r\n\r\n  if (\r\n    typeof username !== \"string\" ||\r\n    typeof password !== \"string\" ||\r\n    typeof redirectTo !== \"string\"\r\n  ) {\r\n    return json({ error: \"Invalid form data\" }, { status: 400 });\r\n  }\r\n\r\n  const existingUser = await db.user.findUnique({ where: { username } });\r\n  if (existingUser) {\r\n    return json({ error: \"A user with this username already exists\" }, { status: 400 });\r\n  }\r\n\r\n  const user = await register({ username, password });\r\n  if (!user) {\r\n    return json({ error: \"Unable to create user\" }, { status: 400 });\r\n  }\r\n\r\n  return createUserSession(user.id, redirectTo, true);\r\n};\r\n\r\nexport default function Register() {\r\n  const actionData = useActionData<typeof action>();\r\n\r\n  return (\r\n    <div className=\"flex min-h-full flex-col justify-center\">\r\n      <div className=\"mx-auto w-full max-w-md px-8\">\r\n        <Form method=\"post\" className=\"space-y-6\">\r\n          <div>\r\n            <label htmlFor=\"username\" className=\"block text-sm font-medium text-gray-700\">\r\n              Username\r\n            </label>\r\n            <div className=\"mt-1\">\r\n              <input\r\n                id=\"username\"\r\n                required\r\n                autoFocus={true}\r\n                name=\"username\"\r\n                type=\"text\"\r\n                className=\"w-full rounded border border-gray-500 px-2 py-1 text-lg\"\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          <div>\r\n            <label htmlFor=\"password\" className=\"block text-sm font-medium text-gray-700\">\r\n              Password\r\n            </label>\r\n            <div className=\"mt-1\">\r\n              <input\r\n                id=\"password\"\r\n                name=\"password\"\r\n                type=\"password\"\r\n                autoComplete=\"new-password\"\r\n                required\r\n                className=\"w-full rounded border border-gray-500 px-2 py-1 text-lg\"\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          <button\r\n            type=\"submit\"\r\n            className=\"w-full rounded bg-blue-500 px-4 py-2 text-white hover:bg-blue-600 focus:bg-blue-400\"\r\n          >\r\n            Create Account\r\n          </button>\r\n          <div className=\"text-center text-sm text-gray-500\">\r\n            Already have an account?{\" \"}\r\n            <a className=\"text-blue-500 underline\" href=\"/login\">\r\n              Log in\r\n            </a>\r\n          </div>\r\n        </Form>\r\n        {actionData?.error ? (\r\n          <div className=\"pt-1 text-red-700\" id=\"error-message\">\r\n            {actionData.error}\r\n          </div>\r\n        ) : null}\r\n      </div>\r\n    </div>\r\n  );\r\n}", "import type { ActionFunction } from \"@remix-run/node\";\r\nimport { redirect } from \"@remix-run/node\";\r\nimport { logout } from \"~/auth.server\";\r\n\r\nexport const action: ActionFunction = async ({ request }) => {\r\n  return logout(request);\r\n};\r\n\r\nexport const loader = async () => {\r\n  return redirect(\"/\");\r\n};", "import { json, LoaderFunction, ActionFunction } from \"@remix-run/node\";\nimport { useLoaderData, useActionData, Form, useFetcher, useSubmit } from \"@remix-run/react\";\nimport { useState, useEffect, useCallback } from \"react\";\nimport { getUser, requireUserId, logout } from \"~/auth.server\";\nimport { db } from \"~/db.server\";\nimport { calculateEqualSplits, calculateIndividualSplits } from \"~/utils/calculateSplits\";\nimport { translations } from \"~/utils/translations\";\nimport { Expense, Junta, User, Invitation, JuntaExpense } from \"~/types\";\nimport { addLocalExpense, addJuntaExpense, deleteExpense } from \"~/actions/expenses.server\";\nimport { createJunta, clearJunta, inviteToJunta } from \"~/actions/juntas.server\";\nimport { respondToInvitation, getInvitations } from \"~/utils/invitations\";\nimport { NotificationInbox } from \"~/components/NotificationInbox\";\n\ntype ActionData = {\n  success: boolean;\n  message: string;\n  error?: string;\n  expense?: Expense;\n  deletedExpenseId?: string;\n  junta?: Junta;\n};\n\nexport const loader: LoaderFunction = async ({ request }) => {\n  const user = await getUser(request);\n  if (!user) {\n    return json({ user: null, juntas: [], localExpenses: [], invitations: [] });\n  }\n  \n  try {\n    const juntas = await db.junta.findMany({\n      where: {  OR: [    { ownerId: user.id },    { members: { some: { id: user.id } } }  ]},\n      include: { \n        members: true,\n        expenses: true \n      },\n    });\n    \n    const localExpenses = await db.expense.findMany({\n      where: { userId: user.id, isLocal: true },\n    });\n    \n    const invitations = await getInvitations(user.id);\n    \n    return json({ user, juntas, localExpenses, invitations });\n  } catch (error) {\n    console.error(\"Error in loader:\", error);\n    return json({ error: \"An error occurred while loading data\" }, { status: 500 });\n  }\n};\n\nexport const action: ActionFunction = async ({ request }) => {\n  const form = await request.formData();\n  const action = form.get(\"action\");\n\n  switch (action) {\n    case \"addLocalExpense\": {\n      const userId = await requireUserId(request);\n      const description = form.get(\"description\") as string;\n      const amount = parseFloat(form.get(\"amount\") as string);\n      const splitAmong = form.get(\"splitAmong\") as string;\n      return await addLocalExpense(userId, { description, amount, paidBy: userId, splitAmong });\n    }\n    case \"addJuntaExpense\": {\n      const userId = await requireUserId(request);\n      const juntaId = form.get(\"juntaId\") as string;\n      const description = form.get(\"description\") as string;\n      const amount = parseFloat(form.get(\"amount\") as string);\n      const splitAmong = form.get(\"splitAmong\") as string;\n      \n      console.log(\"Action received splitAmong:\", splitAmong); // Add this line\n      \n      if (!splitAmong) {\n        return json({ error: \"splitAmong is required\" }, { status: 400 });\n      }\n      \n      return await addJuntaExpense(userId, { juntaId, description, amount, splitAmong });\n    }\n    case \"createJunta\": {\n      const userId = await requireUserId(request);\n      const juntaName = form.get(\"juntaName\") as string;\n      return await createJunta(userId, juntaName);\n    }\n    case \"inviteToJunta\": {\n      const userId = await requireUserId(request);\n      const juntaId = form.get(\"juntaId\") as string;\n      const invitedUsername = form.get(\"invitedUsername\") as string;\n      return await inviteToJunta(juntaId, invitedUsername, userId);\n    }\n    case \"deleteExpense\": {\n      const expenseId = form.get(\"expenseId\") as string;\n      return await deleteExpense(expenseId);\n    }\n    case \"clearJunta\": {\n      const juntaId = form.get(\"juntaId\") as string;\n      return await clearJunta(juntaId);\n    }\n    case \"respondToInvitation\": {\n      const invitationId = form.get(\"invitationId\") as string;\n      const accept = form.get(\"accept\") === \"true\";\n      const result = await respondToInvitation(invitationId, accept);\n      if (result.success && accept) {\n        // Obtener la junta actualizada\n        const updatedJunta = await db.junta.findUnique({\n          where: { id: result.juntaId },\n          include: { members: true, expenses: true }\n        });\n        return json({ ...result, junta: updatedJunta });\n      }\n      return json(result);\n    }\n    case \"logout\":\n      return await logout(request);\n    default:\n      return json({ error: \"Invalid action\" }, { status: 400 });\n  }\n};\n\nfunction convertDates(junta: Junta): Junta {\n  return {\n    ...junta,\n    expenses: junta.expenses.map(expense => ({\n      ...expense,\n      createdAt: new Date(expense.createdAt)\n    }))\n  };\n}\n\nexport default function Index() {\n  const { user, juntas: initialJuntas, localExpenses: initialLocalExpenses, invitations: initialInvitations } = useLoaderData<typeof loader>();\n  const actionData = useActionData<ActionData>();\n  const [language, setLanguage] = useState<'es' | 'en'>('es');\n  const [showTutorial, setShowTutorial] = useState(user?.isNewUser ?? false);\n  const [selectedJunta, setSelectedJunta] = useState<Junta | null>(null);\n  const [showNotifications, setShowNotifications] = useState(false);\n  const [splits, setSplits] = useState<{ from: string; to: string; amount: number }[]>([]);\n  const [splitAmongAll, setSplitAmongAll] = useState(false);\n  const [juntas, setJuntas] = useState<Junta[]>(initialJuntas.map(convertDates));\n  const [localExpenses, setLocalExpenses] = useState<Expense[]>(initialLocalExpenses);\n  const [invitations, setInvitations] = useState<Invitation[]>(initialInvitations);\n  const fetcher = useFetcher<ActionData>();\n  const submit = useSubmit();\n\n  const t = translations[language];\n\n  const toggleLanguage = () => {\n    setLanguage(prev => prev === 'es' ? 'en' : 'es');\n  };\n\n  const [splitType, setSplitType] = useState<'equal' | 'individual'>('equal');\n\n  const handleCalculateSplits = useCallback(() => {\n    if (selectedJunta) {\n      const calculatedSplits = splitType === 'equal' \n        ? calculateEqualSplits(selectedJunta.expenses, selectedJunta.members)\n        : calculateIndividualSplits(selectedJunta.expenses, selectedJunta.members);\n      setSplits(calculatedSplits);\n    } else if (user) {\n      const calculatedSplits = splitType === 'equal'\n        ? calculateEqualSplits(localExpenses, [user])\n        : calculateIndividualSplits(localExpenses, [user]);\n      setSplits(calculatedSplits);\n    }\n  }, [selectedJunta, localExpenses, user, splitType]);\n\n  useEffect(() => {\n    handleCalculateSplits();\n  }, [selectedJunta, localExpenses, handleCalculateSplits]);\n\n  const updateJuntas = (newJunta: Junta) => {\n    setJuntas(prevJuntas => {\n      const index = prevJuntas.findIndex(j => j.id === newJunta.id);\n      if (index !== -1) {\n        // Si la junta ya existe, actualizarla\n        const updatedJuntas = [...prevJuntas];\n        updatedJuntas[index] = convertDates(newJunta);\n        return updatedJuntas;\n      } else {\n        // Si es una nueva junta, a\u00F1adirla al array\n        return [...prevJuntas, convertDates(newJunta)];\n      }\n    });\n  };\n\n  const handleInvitationResponse = async (invitationId: string, accept: boolean): Promise<{ success: boolean; message: string; junta?: any }> => {\n    const formData = new FormData();\n    formData.append('action', 'respondToInvitation');\n    formData.append('invitationId', invitationId);\n    formData.append('accept', accept.toString());\n\n    fetcher.submit(formData, { method: \"post\" });\n\n    // We'll use a state to track when the fetcher has completed\n    const [fetcherCompleted, setFetcherCompleted] = useState(false);\n\n    useEffect(() => {\n      if (fetcher.state === 'idle' && fetcher.data) {\n        setFetcherCompleted(true);\n      }\n    }, [fetcher.state, fetcher.data]);\n\n    // Wait for the fetcher to complete\n    while (!fetcherCompleted) {\n      await new Promise(resolve => setTimeout(resolve, 100));\n    }\n\n    if (fetcher.data && 'success' in fetcher.data) {\n      if (fetcher.data.success && 'junta' in fetcher.data && fetcher.data.junta) {\n        updateJuntas(fetcher.data.junta as Junta);\n      }\n      return {\n        success: fetcher.data.success,\n        message: fetcher.data.message || '',\n        junta: fetcher.data.junta\n      };\n    }\n\n    return {\n      success: false,\n      message: 'An error occurred while processing the invitation'\n    };\n  };\n\n  const handleInviteUser = async (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    const form = event.currentTarget;\n    const formData = new FormData(form);\n    fetcher.submit(formData, { method: \"post\" });\n  };\n\n  const handleAddExpense = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    const form = event.currentTarget;\n    const formData = new FormData(form);\n    const action = formData.get(\"action\") as string;\n\n    if (action === \"addLocalExpense\") {\n      fetcher.submit(formData, { method: \"post\" });\n    } else if (action === \"addJuntaExpense\") {\n      let splitAmong = formData.get(\"splitAmong\") as string;\n      if (splitAmongAll && selectedJunta) {\n        splitAmong = selectedJunta.members.map(member => member.username).join(',');\n      }\n      \n      if (!splitAmong) {\n        alert(t.pleaseSpecifySplitAmong);\n        return;\n      }\n\n      formData.set(\"splitAmong\", splitAmong);\n      formData.set(\"juntaId\", selectedJunta!.id);\n      fetcher.submit(formData, { method: \"post\" });\n    }\n\n    form.reset();\n  };\n\n  const handleDeleteExpense = (expenseId: string) => {\n    fetcher.submit(\n      { action: \"deleteExpense\", expenseId },\n      { method: \"post\" }\n    );\n  };\n\n  useEffect(() => {\n    if (fetcher.data && fetcher.state === \"idle\") {\n      if (fetcher.data.success) {\n        if ('expense' in fetcher.data && fetcher.data.expense) {\n          const newExpense: Expense = {\n            ...fetcher.data.expense,\n            createdAt: new Date(fetcher.data.expense.createdAt)\n          };\n          setLocalExpenses(prevExpenses => [...prevExpenses, newExpense]);\n        } else if ('deletedExpenseId' in fetcher.data && fetcher.data.deletedExpenseId) {\n          const deletedId = fetcher.data.deletedExpenseId;\n          if (selectedJunta) {\n            setSelectedJunta(prevJunta => {\n              if (prevJunta) {\n                return {\n                  ...prevJunta,\n                  expenses: prevJunta.expenses.filter(expense => expense.id !== deletedId)\n                };\n              }\n              return null;\n            });\n          } else {\n            setLocalExpenses(prevExpenses => \n              prevExpenses.filter(expense => expense.id !== deletedId)\n            );\n          }\n        } else if ('junta' in fetcher.data && fetcher.data.junta) {\n          updateJuntas(fetcher.data.junta);\n        }\n      } else if ('error' in fetcher.data && fetcher.data.error) {\n        console.error(\"Error:\", fetcher.data.error);\n        // Aqu\u00ED puedes manejar el error, por ejemplo, mostrando un mensaje al usuario\n      }\n    }\n  }, [fetcher.data, fetcher.state, selectedJunta]);\n\n  useEffect(() => {\n    if (actionData?.junta) {\n      setSelectedJunta(convertDates(actionData.junta));\n    }\n  }, [actionData]);\n\n  return (\n    <div className=\"container mx-auto p-4 bg-gray-100 min-h-screen\">\n      {user ? (\n        <>\n          <div className=\"flex justify-between items-center mb-6\">\n            <h1 className=\"text-3xl font-bold text-blue-600\">{t.welcome}, {user.username}!</h1>\n            <div className=\"flex items-center\">\n              <button\n                onClick={() => setLanguage(lang => lang === 'es' ? 'en' : 'es')}\n                className=\"bg-yellow-500 text-white p-2 rounded hover:bg-yellow-600 transition mr-2\"\n              >\n                {language === 'es' ? 'EN' : 'ES'}\n              </button>\n              <Form method=\"post\">\n                <input type=\"hidden\" name=\"action\" value=\"logout\" />\n                <button type=\"submit\" className=\"bg-red-500 text-white p-2 rounded hover:bg-red-600 transition\">\n                  {t.logout}\n                </button>\n              </Form>\n            </div>\n          </div>\n          \n          {showTutorial && (\n            <div className=\"bg-white p-6 rounded-lg shadow-md mb-6\">\n              <h2 className=\"text-2xl font-bold mb-4\">{t.tutorial.welcome}</h2>\n              {t.tutorial.algorithms.map((algo, index) => (\n                <div key={index} className=\"mb-4\">\n                  <h3 className=\"text-xl font-semibold\">{algo.name}</h3>\n                  <p>{algo.description}</p>\n                </div>\n              ))}\n              <button \n                onClick={() => setShowTutorial(false)} \n                className=\"mt-4 bg-yellow-500 text-white px-4 py-2 rounded hover:bg-yellow-600 transition\"\n              >\n                {t.tutorial.close}\n              </button>\n            </div>\n          )}\n\n          <div className=\"mb-6\">\n            <h2 className=\"text-2xl font-semibold mb-4 text-blue-800\">{t.createJunta}</h2>\n            <Form method=\"post\" className=\"flex space-x-2\">\n              <input type=\"hidden\" name=\"action\" value=\"createJunta\" />\n              <input\n                type=\"text\"\n                name=\"juntaName\"\n                placeholder={t.juntaName}\n                className=\"flex-grow border p-2 rounded\"\n                required\n              />\n              <button type=\"submit\" className=\"bg-blue-500 text-white p-2 rounded hover:bg-blue-600 transition\">\n                {t.create}\n              </button>\n            </Form>\n          </div>\n\n          <div className=\"mb-6\">\n            <h2 className=\"text-2xl font-semibold mb-4 text-blue-800\">{t.yourJuntas}</h2>\n            {Array.isArray(juntas) && juntas.length > 0 ? (\n              <select\n                onChange={(e) => {\n                  const selected = juntas.find((j: Junta) => j.id === e.target.value);\n                  setSelectedJunta(selected || null);\n                }}\n                className=\"w-full p-2 border rounded mb-4\"\n              >\n                <option value=\"\">{t.selectJunta}</option>\n                {juntas.map((j: Junta) => (\n                  <option key={j.id} value={j.id}>\n                    {j.name}\n                  </option>\n                ))}\n              </select>\n            ) : (\n              <p>{t.noJuntas}</p>\n            )}\n          </div>\n\n          {selectedJunta && (\n            <div className=\"bg-white p-6 rounded-lg shadow-md mb-6\">\n              <h3 className=\"text-xl font-semibold mb-4 text-blue-700\">{selectedJunta.name}</h3>\n              \n              <Form method=\"post\" onSubmit={handleInviteUser} className=\"mb-4\">\n                <input type=\"hidden\" name=\"action\" value=\"inviteToJunta\" />\n                <input type=\"hidden\" name=\"juntaId\" value={selectedJunta.id} />\n                <div className=\"flex space-x-2\">\n                  <input\n                    type=\"text\"\n                    name=\"invitedUsername\"\n                    placeholder={t.inviteUser}\n                    className=\"flex-grow border p-2 rounded\"\n                    required\n                  />\n                  <button type=\"submit\" className=\"bg-green-500 text-white p-2 rounded hover:bg-green-600 transition\">\n                    {t.invite}\n                  </button>\n                </div>\n              </Form>\n\n              <Form method=\"post\" onSubmit={handleAddExpense} className=\"mb-4\">\n                <input type=\"hidden\" name=\"action\" value=\"addJuntaExpense\" />\n                <input type=\"hidden\" name=\"juntaId\" value={selectedJunta.id} />\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-2\">\n                  <input\n                    type=\"text\"\n                    name=\"description\"\n                    placeholder={t.description}\n                    className=\"border p-2 rounded\"\n                    required\n                  />\n                  <input\n                    type=\"number\"\n                    name=\"amount\"\n                    placeholder={t.amount}\n                    className=\"border p-2 rounded\"\n                    required\n                  />\n                  <div className=\"flex items-center\">\n                    <input\n                      type=\"text\"\n                      name=\"splitAmong\"\n                      placeholder={t.splitAmong}\n                      className=\"border p-2 rounded flex-grow\"\n                      required={!splitAmongAll}\n                      disabled={splitAmongAll}\n                    />\n                    <label className=\"ml-2 flex items-center\">\n                      <input\n                        type=\"checkbox\"\n                        checked={splitAmongAll}\n                        onChange={() => setSplitAmongAll(!splitAmongAll)}\n                        className=\"mr-1\"\n                      />\n                      {t.splitAmongAll}\n                    </label>\n                  </div>\n                </div>\n                <button type=\"submit\" className=\"mt-2 bg-blue-500 text-white p-2 rounded hover:bg-blue-600 transition\">\n                  {t.addExpense}\n                </button>\n              </Form>\n\n              {/* Gastos de la Junta */}\n              <div className=\"mt-6\">\n                <h4 className=\"text-lg font-semibold text-blue-600\">{t.juntaExpenses}</h4>\n                <ul className=\"space-y-2\">\n                  {selectedJunta.expenses.map((expense: JuntaExpense) => (\n                    <li key={expense.id} className=\"bg-gray-100 p-2 rounded flex justify-between items-center\">\n                      <span>\n                        {expense.description} - {expense.amount.toFixed(2)} \n                        ({t.paidBy} {selectedJunta.members.find(m => m.id === expense.paidBy)?.username})\n                      </span>\n                      <button\n                        onClick={() => handleDeleteExpense(expense.id)}\n                        className=\"bg-red-500 text-white p-1 rounded hover:bg-red-600 transition\"\n                      >\n                        {t.deleteExpense}\n                      </button>\n                    </li>\n                  ))}\n                </ul>\n              </div>\n\n              {/* Mis Gastos */}\n              <div className=\"mt-6\">\n                <h4 className=\"text-lg font-semibold text-blue-600\">{t.myExpenses}</h4>\n                <ul className=\"space-y-2\">\n                  {selectedJunta.expenses.filter(e => e.paidBy === user?.id).map((expense: JuntaExpense) => (\n                    <li key={expense.id} className=\"bg-gray-100 p-2 rounded flex justify-between items-center\">\n                      <span>{expense.description} - {expense.amount.toFixed(2)}</span>\n                      <button\n                        onClick={() => handleDeleteExpense(expense.id)}\n                        className=\"bg-red-500 text-white p-1 rounded hover:bg-red-600 transition\"\n                      >\n                        {t.deleteExpense}\n                      </button>\n                    </li>\n                  ))}\n                </ul>\n              </div>\n\n              <div className=\"mt-4 space-x-2\">\n                <button\n                  onClick={() => {\n                    setSplitType('equal');\n                    handleCalculateSplits();\n                  }}\n                  className=\"bg-purple-500 text-white p-2 rounded hover:bg-purple-600 transition\"\n                >\n                  {t.equalizeMoneyButton}\n                </button>\n                <button\n                  onClick={() => {\n                    setSplitType('individual');\n                    handleCalculateSplits();\n                  }}\n                  className=\"bg-green-500 text-white p-2 rounded hover:bg-green-600 transition\"\n                >\n                  {t.calculateDivisionsButton}\n                </button>\n              </div>\n\n              {/* Divisiones Generales */}\n              {splits.length > 0 && (\n                <div className=\"mt-4\">\n                  <h4 className=\"text-lg font-semibold text-blue-600\">\n                    {splitType === 'equal' ? t.generalSplitsEqual : t.generalSplitsIndividual}\n                  </h4>\n                  <ul className=\"space-y-2\">\n                    {splits.map((split, index) => (\n                      <li key={index} className=\"bg-gray-100 p-2 rounded\">\n                        {`${split.from} ${t.owes} ${split.to}: ${split.amount.toFixed(2)}`}\n                      </li>\n                    ))}\n                  </ul>\n                </div>\n              )}\n\n              {/* Mis Divisiones */}\n              {splits.length > 0 && (\n                <div className=\"mt-4\">\n                  <h4 className=\"text-lg font-semibold text-blue-600\">{t.mySplits}</h4>\n                  <ul className=\"space-y-2\">\n                    {splits.filter(split => split.from === user?.username || split.to === user?.username).map((split, index) => (\n                      <li key={index} className=\"bg-gray-100 p-2 rounded\">\n                        {split.from === user?.username \n                          ? `${t.youOwe} ${split.to}: ${split.amount.toFixed(2)}`\n                          : `${split.from} ${t.owesYou}: ${split.amount.toFixed(2)}`}\n                      </li>\n                    ))}\n                  </ul>\n                </div>\n              )}\n\n              <Form method=\"post\" className=\"mt-4\">\n                <input type=\"hidden\" name=\"action\" value=\"clearJunta\" />\n                <input type=\"hidden\" name=\"juntaId\" value={selectedJunta.id} />\n                <button type=\"submit\" className=\"bg-red-500 text-white p-2 rounded hover:bg-red-600 transition\">\n                  {t.clearJunta}\n                </button>\n              </Form>\n            </div>\n          )}\n\n          <div className=\"mb-6\">\n            <h2 className=\"text-2xl font-semibold mb-4 text-blue-800\">{t.localExpenses}</h2>\n            <Form method=\"post\" onSubmit={handleAddExpense} className=\"mb-4\">\n              <input type=\"hidden\" name=\"action\" value=\"addLocalExpense\" />\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-2\">\n                <input\n                  type=\"text\"\n                  name=\"description\"\n                  placeholder={t.description}\n                  className=\"border p-2 rounded\"\n                  required\n                />\n                <input\n                  type=\"number\"\n                  name=\"amount\"\n                  placeholder={t.amount}\n                  className=\"border p-2 rounded\"\n                  required\n                />\n                <input\n                  type=\"text\"\n                  name=\"splitAmong\"\n                  placeholder={t.splitAmong}\n                  className=\"border p-2 rounded\"\n                  required\n                />\n              </div>\n              <button type=\"submit\" className=\"mt-2 bg-blue-500 text-white p-2 rounded hover:bg-blue-600 transition\">\n                {t.addLocalExpense}\n              </button>\n            </Form>\n\n            <ul className=\"space-y-2\">\n              {localExpenses.map((expense: Expense) => (\n                <li key={expense.id} className=\"flex justify-between items-center bg-gray-100 p-2 rounded\">\n                  <span>{expense.description} - {expense.amount.toFixed(2)}</span>\n                  <button\n                    onClick={() => handleDeleteExpense(expense.id)}\n                    className=\"text-red-500 hover:text-red-700 transition\"\n                  >\n                    {t.deleteExpense}\n                  </button>\n                </li>\n              ))}\n            </ul>\n\n            <button\n              onClick={handleCalculateSplits}\n              className=\"mt-4 bg-purple-500 text-white p-2 rounded hover:bg-purple-600 transition\"\n            >\n              {t.calculateSplits}\n            </button>\n\n            {splits.length > 0 && (\n              <div className=\"mt-4\">\n                <h3 className=\"text-lg font-semibold text-blue-600\">{t.splits}</h3>\n                <ul className=\"space-y-2\">\n                  {splits.map((split, index) => (\n                    <li key={index} className=\"bg-gray-100 p-2 rounded\">\n                      {`${split.from} ${t.owes} ${split.to}: ${split.amount.toFixed(2)}`}\n                    </li>\n                  ))}\n                </ul>\n              </div>\n            )}\n          </div>\n\n          <button\n            onClick={() => setShowNotifications(!showNotifications)}\n            className=\"bg-blue-500 text-white p-2 rounded mb-4 hover:bg-blue-600 transition\"\n          >\n            {t.notifications}\n          </button>\n          {showNotifications && user.id && (\n            <NotificationInbox \n              userId={user.id} \n              initialInvitations={invitations} \n              onInvitationResponse={handleInvitationResponse} \n            />\n          )}\n        </>\n      ) : (\n        <div className=\"text-center\">\n          <p className=\"mb-4 text-xl\">{t.pleaseLogin}</p>\n          <div className=\"space-x-4\">\n            <a href=\"/login\" className=\"bg-blue-500 text-white p-2 rounded hover:bg-blue-600 transition\">\n              {t.login}\n            </a>\n            <a href=\"/register\" className=\"bg-green-500 text-white p-2 rounded hover:bg-green-600 transition\">\n              {t.register}\n            </a>\n          </div>\n        </div>\n      )}\n\n      {actionData?.error && (\n        <div className=\"text-red-500 mt-4 p-2 bg-red-100 rounded\">{actionData.error}</div>\n      )}\n    </div>\n  );\n}", "import { Split } from '~/types';\r\n\r\nexport function floydWarshall(initialSplits: Split[]): Split[] {\r\n  console.log('Initial splits:', initialSplits);\r\n\r\n  const participants = Array.from(new Set(initialSplits.flatMap(split => [split.from, split.to])));\r\n  console.log('Participants:', participants);\r\n\r\n  const n = participants.length;\r\n  const dist: number[][] = Array(n).fill(0).map(() => Array(n).fill(0));\r\n\r\n  // Initialize distance matrix\r\n  initialSplits.forEach(split => {\r\n    const i = participants.indexOf(split.from);\r\n    const j = participants.indexOf(split.to);\r\n    dist[i][j] += split.amount;\r\n    dist[j][i] -= split.amount;\r\n  });\r\n  console.log('Initial distance matrix:', dist);\r\n\r\n  // Floyd-Warshall algorithm\r\n  for (let k = 0; k < n; k++) {\r\n    for (let i = 0; i < n; i++) {\r\n      for (let j = 0; j < n; j++) {\r\n        if (Math.abs(dist[i][k] + dist[k][j]) < Math.abs(dist[i][j])) {\r\n          dist[i][j] = dist[i][k] + dist[k][j];\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // Construct optimized splits\r\n  const optimizedSplits: Split[] = [];\r\n  for (let i = 0; i < n; i++) {\r\n    for (let j = i + 1; j < n; j++) {\r\n      const amount = parseFloat(dist[i][j].toFixed(2));\r\n      if (amount > 0.01) {\r\n        optimizedSplits.push({\r\n          from: participants[i],\r\n          to: participants[j],\r\n          amount: amount\r\n        });\r\n      } else if (amount < -0.01) {\r\n        optimizedSplits.push({\r\n          from: participants[j],\r\n          to: participants[i],\r\n          amount: -amount\r\n        });\r\n      }\r\n    }\r\n  }\r\n  console.log('Optimized splits:', optimizedSplits);\r\n\r\n  return optimizedSplits;\r\n}", "import { AnyExpense, User, Split } from '~/types';\r\n\r\nexport function calculateIndividualSplits(expenses: AnyExpense[], participants: User[]): Split[] {\r\n  const balances: { [key: string]: number } = {};\r\n  participants.forEach(p => balances[p.id] = 0);\r\n\r\n  // Calcular los balances iniciales\r\n  const totalExpense = expenses.reduce((sum, expense) => sum + expense.amount, 0);\r\n  const averageExpense = totalExpense / participants.length;\r\n\r\n  expenses.forEach(expense => {\r\n    balances[expense.paidBy] += expense.amount;\r\n  });\r\n\r\n  participants.forEach(p => {\r\n    balances[p.id] -= averageExpense;\r\n  });\r\n\r\n  console.log(\"Balances iniciales:\", balances);\r\n\r\n  // Crear las divisiones\r\n  const splits: Split[] = [];\r\n  const debtors = participants.filter(p => balances[p.id] < 0);\r\n  const creditors = participants.filter(p => balances[p.id] > 0);\r\n\r\n  debtors.forEach(debtor => {\r\n    let remainingDebt = -balances[debtor.id];\r\n    creditors.forEach(creditor => {\r\n      if (remainingDebt > 0 && balances[creditor.id] > 0) {\r\n        const amount = Math.min(remainingDebt, balances[creditor.id]);\r\n        if (amount > 0.01) {\r\n          splits.push({\r\n            from: debtor.username,\r\n            to: creditor.username,\r\n            amount: parseFloat(amount.toFixed(2))\r\n          });\r\n        }\r\n        remainingDebt -= amount;\r\n        balances[creditor.id] -= amount;\r\n      }\r\n    });\r\n  });\r\n\r\n  console.log(\"Splits calculados:\", splits);\r\n\r\n  return splits;\r\n}", "import { AnyExpense, User, Split } from '~/types';\r\nimport { floydWarshall } from './floydWarshall';\r\nimport { calculateIndividualSplits } from './calculateIndividualSplits';\r\n\r\n// Funci\u00F3n existente, renombrada para claridad\r\nexport function calculateEqualSplits(expenses: AnyExpense[], participants: User[]): Split[] {\r\n  const balances = calculateBalances(expenses, participants);\r\n  console.log('Calculated balances:', balances);\r\n\r\n  const initialSplits: Split[] = [];\r\n\r\n  // Crear splits iniciales basados en los balances\r\n  Object.entries(balances).forEach(([payer, balance]) => {\r\n    if (balance > 0) {\r\n      Object.entries(balances).forEach(([receiver, receiverBalance]) => {\r\n        if (receiverBalance < 0) {\r\n          const amount = Math.min(balance, -receiverBalance);\r\n          if (amount > 0.01) {\r\n            initialSplits.push({\r\n              from: payer,\r\n              to: receiver,\r\n              amount: parseFloat(amount.toFixed(2))\r\n            });\r\n          }\r\n        }\r\n      });\r\n    }\r\n  });\r\n\r\n  console.log('Initial splits:', initialSplits);\r\n\r\n  // Aplicar el algoritmo de Floyd-Warshall\r\n  const optimizedSplits = floydWarshall(initialSplits);\r\n\r\n  console.log('Optimized splits:', optimizedSplits);\r\n  return optimizedSplits;\r\n}\r\n\r\n// Nueva funci\u00F3n para calcular divisiones basadas en gastos individuales\r\nexport { calculateIndividualSplits };\r\n\r\nfunction calculateBalances(expenses: AnyExpense[], participants: User[]): { [key: string]: number } {\r\n  const balances: { [key: string]: number } = {};\r\n  participants.forEach(p => balances[p.username] = 0);\r\n\r\n  const totalExpense = expenses.reduce((sum, expense) => sum + expense.amount, 0);\r\n  const sharePerPerson = totalExpense / participants.length;\r\n\r\n  expenses.forEach(expense => {\r\n    const paidByUser = participants.find(p => p.id === expense.paidBy);\r\n    const paidBy = paidByUser ? paidByUser.username : expense.paidBy;\r\n    balances[paidBy] = (balances[paidBy] || 0) + expense.amount;\r\n  });\r\n\r\n  participants.forEach(person => {\r\n    balances[person.username] -= sharePerPerson;\r\n  });\r\n\r\n  return balances;\r\n}\r\n", "export const translations = {\r\n  es: {\r\n    title: \"Divisor de Gastos\",\r\n    welcome: \"Bienvenido\",\r\n    addExpense: \"Agregar Gasto\",\r\n    description: \"Descripci\u00F3n\",\r\n    amount: \"Monto\",\r\n    splitAmong: \"Dividir Entre (separado por comas)\",\r\n    expenses: \"Gastos\",\r\n    calculateSplits: \"Calcular Divisiones\",\r\n    splits: \"Divisiones\",\r\n    logout: \"Cerrar Sesi\u00F3n\",\r\n    login: \"Iniciar Sesi\u00F3n\",\r\n    register: \"Registrarse\",\r\n    pleaseLogin: \"Por favor inicia sesi\u00F3n para usar el Divisor de Gastos.\",\r\n    owes: \"debe a\",\r\n    changeLanguage: \"Change to English\",\r\n    tutorial: {\r\n      welcome: \"Algoritmos utilizados en el Divisor de Gastos\",\r\n      algorithms: [\r\n        {\r\n          name: \"Floyd-Warshall\",\r\n          description: \"Utilizado en la funci\u00F3n 'Igualar Dinero'. Este algoritmo de programaci\u00F3n din\u00E1mica optimiza las transferencias de dinero entre los participantes. Funciona creando una matriz de distancias (deudas) entre todos los participantes y luego iterando sobre esta matriz para encontrar las rutas m\u00E1s eficientes para saldar deudas. En nuestra implementaci\u00F3n, inicializamos la matriz con las deudas directas y luego aplicamos el algoritmo para minimizar el n\u00FAmero de transacciones necesarias.\"\r\n        },\r\n        {\r\n          name: \"T\u00E9cnicas de recorrido en grafos\",\r\n          description: \"Utilizadas en la funci\u00F3n 'Calcular Divisiones'. Tratamos a los participantes como nodos de un grafo y sus deudas como aristas. Recorremos este grafo para calcular los balances individuales y luego determinar las transferencias \u00F3ptimas. Este enfoque nos permite manejar eficientemente las relaciones de deuda complejas entre m\u00FAltiples participantes.\"\r\n        },\r\n        {\r\n          name: \"Programaci\u00F3n Din\u00E1mica\",\r\n          description: \"Aplicada en ambas funciones de c\u00E1lculo de divisiones. En 'Igualar Dinero', la usamos dentro del algoritmo Floyd-Warshall para optimizar las transferencias. En 'Calcular Divisiones', la utilizamos para calcular eficientemente los balances acumulados de cada participante, evitando c\u00E1lculos redundantes al procesar m\u00FAltiples gastos.\"\r\n        }\r\n      ],\r\n      close: \"Cerrar Tutorial\"\r\n    },\r\n    juntas: \"Juntas\",\r\n    createJunta: \"Crear Nueva Junta\",\r\n    localExpenses: \"Gastos Locales\",\r\n    addLocalExpense: \"A\u00F1adir Gasto Local\",\r\n    deleteExpense: \"Eliminar Gasto\",\r\n    clearJunta: \"Vaciar Junta\",\r\n    paidBy: \"Pagado por\",\r\n    notifications: \"Notificaciones\",\r\n    inviteUser: \"Invitar usuario\",\r\n    invite: \"Invitar\",\r\n    closeTutorial: \"Cerrar tutorial\",\r\n    juntaName: \"Nombre de la junta\",\r\n    create: \"Crear\",\r\n    yourJuntas: \"Tus juntas\",\r\n    selectJunta: \"Seleccionar junta\",\r\n    noJuntas: \"No tienes juntas creadas a\u00FAn.\",\r\n    splitAmongAll: \"Dividir entre todos\",\r\n    pleaseSpecifySplitAmong: \"Por favor, especifica entre qui\u00E9nes se divide el gasto.\",\r\n    juntaExpenses: \"Gastos de la Junta\",\r\n    myExpenses: \"Mis Gastos\",\r\n    generalSplits: \"Divisiones Generales\",\r\n    mySplits: \"Mis Divisiones\",\r\n    youOwe: \"Debes a\",\r\n    owesYou: \"te debe\",\r\n    equalizeMoneyButton: \"Igualar Dinero\",\r\n    calculateDivisionsButton: \"Calcular Divisiones\",\r\n    generalSplitsEqual: \"Divisiones Generales (Igualadas)\",\r\n    generalSplitsIndividual: \"Divisiones Generales (Basadas en Gastos Individuales)\",\r\n    invitationAccepted: \"Invitaci\u00F3n aceptada con \u00E9xito\",\r\n    operationFailed: \"La operaci\u00F3n fall\u00F3 o devolvi\u00F3 datos inesperados\",\r\n  },\r\n  en: {\r\n    title: \"Expense Splitter\",\r\n    welcome: \"Welcome\",\r\n    addExpense: \"Add Expense\",\r\n    description: \"Description\",\r\n    amount: \"Amount\",\r\n    splitAmong: \"Split Among (comma-separated)\",\r\n    expenses: \"Expenses\",\r\n    calculateSplits: \"Calculate Splits\",\r\n    splits: \"Splits\",\r\n    logout: \"Logout\",\r\n    login: \"Login\",\r\n    register: \"Register\",\r\n    pleaseLogin: \"Please log in to use the Expense Splitter.\",\r\n    owes: \"owes\",\r\n    changeLanguage: \"Cambiar a Espa\u00F1ol\",\r\n    tutorial: {\r\n      welcome: \"Algorithms used in the Expense Splitter\",\r\n      algorithms: [\r\n        {\r\n          name: \"Floyd-Warshall\",\r\n          description: \"Used in the 'Equalize Money' function. This dynamic programming algorithm optimizes money transfers between participants. It works by creating a distance (debt) matrix between all participants and then iterating over this matrix to find the most efficient routes to settle debts. In our implementation, we initialize the matrix with direct debts and then apply the algorithm to minimize the number of necessary transactions.\"\r\n        },\r\n        {\r\n          name: \"Graph traversal techniques\",\r\n          description: \"Used in the 'Calculate Divisions' function. We treat participants as nodes in a graph and their debts as edges. We traverse this graph to calculate individual balances and then determine optimal transfers. This approach allows us to efficiently handle complex debt relationships between multiple participants.\"\r\n        },\r\n        {\r\n          name: \"Dynamic Programming\",\r\n          description: \"Applied in both division calculation functions. In 'Equalize Money', we use it within the Floyd-Warshall algorithm to optimize transfers. In 'Calculate Divisions', we use it to efficiently calculate the accumulated balances of each participant, avoiding redundant calculations when processing multiple expenses.\"\r\n        }\r\n      ],\r\n      close: \"Close Tutorial\"\r\n    },\r\n    juntas: \"Groups\",\r\n    createJunta: \"Create New Group\",\r\n    localExpenses: \"Local Expenses\",\r\n    addLocalExpense: \"Add Local Expense\",\r\n    deleteExpense: \"Delete Expense\",\r\n    clearJunta: \"Clear Group\",\r\n    paidBy: \"Paid by\",\r\n    notifications: \"Notifications\",\r\n    inviteUser: \"Invite user\",\r\n    invite: \"Invite\",\r\n    closeTutorial: \"Close tutorial\",\r\n    juntaName: \"Group name\",\r\n    create: \"Create\",\r\n    yourJuntas: \"Your groups\",\r\n    selectJunta: \"Select group\",\r\n    noJuntas: \"You don't have any juntas created yet.\",\r\n    splitAmongAll: \"Split among all\",\r\n    pleaseSpecifySplitAmong: \"Please specify who to split the expense among.\",\r\n    juntaExpenses: \"Group Expenses\",\r\n    myExpenses: \"My Expenses\",\r\n    generalSplits: \"General Splits\",\r\n    mySplits: \"My Splits\",\r\n    youOwe: \"You owe\",\r\n    owesYou: \"owes you\",\r\n    equalizeMoneyButton: \"Equalize Money\",\r\n    calculateDivisionsButton: \"Calculate Divisions\",\r\n    generalSplitsEqual: \"General Splits (Equalized)\",\r\n    generalSplitsIndividual: \"General Splits (Based on Individual Expenses)\",\r\n    invitationAccepted: \"Invitation accepted successfully\",\r\n    operationFailed: \"The operation failed or returned unexpected data\",\r\n  }\r\n};", "import { json } from \"@remix-run/node\";\r\nimport { db } from \"~/db.server\";\r\nimport { Expense, JuntaExpense } from \"~/types\";\r\n\r\nexport async function addLocalExpense(userId: string, expenseData: { description: string; amount: number; paidBy: string; splitAmong: string }) {\r\n  try {\r\n    const expense = await db.expense.create({\r\n      data: {\r\n        ...expenseData,\r\n        userId,\r\n        isLocal: true\r\n      }\r\n    });\r\n\r\n    return json({ success: true, expense });\r\n  } catch (error) {\r\n    console.error(\"Error adding local expense:\", error);\r\n    return json({ success: false, error: \"Failed to add local expense\" }, { status: 500 });\r\n  }\r\n}\r\n\r\nexport async function addJuntaExpense(userId: string, data: { juntaId: string, description: string, amount: number, splitAmong: string }): Promise<JuntaExpense> {\r\n  const { juntaId, description, amount, splitAmong } = data;\r\n\r\n  const newExpense = await db.juntaExpense.create({\r\n    data: {\r\n      description,\r\n      amount,\r\n      paidBy: userId,\r\n      splitAmong,\r\n      junta: { connect: { id: juntaId } },\r\n    },\r\n  });\r\n\r\n  return newExpense as JuntaExpense;\r\n}\r\n\r\nexport async function deleteExpense(expenseId: string) {\r\n  try {\r\n    // Primero, intentamos eliminar un gasto local\r\n    const deletedLocalExpense = await db.expense.delete({\r\n      where: { id: expenseId },\r\n    }).catch(() => null);\r\n\r\n    // Si no se encontr\u00F3 un gasto local, intentamos eliminar un gasto de junta\r\n    if (!deletedLocalExpense) {\r\n      await db.juntaExpense.delete({\r\n        where: { id: expenseId },\r\n      });\r\n    }\r\n\r\n    return json({ success: true });\r\n  } catch (error) {\r\n    console.error(\"Error deleting expense:\", error);\r\n    return json({ success: false, error: \"Failed to delete expense\" }, { status: 500 });\r\n  }\r\n}\r\n", "import { db } from \"~/db.server\";\r\nimport { Invitation } from \"~/types\";\r\n\r\nexport async function inviteUserToJunta(juntaId: string, invitedUserId: string, inviterId: string) {\r\n  try {\r\n    // Verificar que el usuario no se est\u00E9 invitando a s\u00ED mismo\r\n    if (invitedUserId === inviterId) {\r\n      return { success: false, message: \"You cannot invite yourself\" };\r\n    }\r\n\r\n    // Verificar si ya existe una invitaci\u00F3n pendiente para este usuario en esta junta\r\n    const existingInvitation = await db.invitation.findFirst({\r\n      where: {\r\n        juntaId,\r\n        invitedUserId,\r\n        status: \"PENDING\"\r\n      }\r\n    });\r\n\r\n    if (existingInvitation) {\r\n      return { success: false, message: \"An invitation for this user is already pending\" };\r\n    }\r\n\r\n    // Verificar si el usuario ya es miembro de la junta\r\n    const junta = await db.junta.findUnique({\r\n      where: { id: juntaId },\r\n      include: { members: true }\r\n    });\r\n\r\n    if (junta?.members.some(member => member.id === invitedUserId)) {\r\n      return { success: false, message: \"This user is already a member of the junta\" };\r\n    }\r\n\r\n    // Crear la invitaci\u00F3n si todas las validaciones pasan\r\n    const invitation = await db.invitation.create({\r\n      data: {\r\n        juntaId,\r\n        invitedUserId,\r\n        inviterId,\r\n        status: \"PENDING\"\r\n      },\r\n      include: {\r\n        junta: { select: { name: true } },\r\n        inviter: { select: { username: true } },\r\n        invitedUser: { select: { username: true } }\r\n      }\r\n    });\r\n\r\n    console.log(\"Created invitation:\", invitation);\r\n    return { success: true, message: \"Invitation sent successfully\", invitation };\r\n  } catch (error) {\r\n    console.error(\"Error creating invitation:\", error);\r\n    return { success: false, message: \"Failed to create invitation\" };\r\n  }\r\n}\r\n\r\nexport async function getInvitations(userId: string): Promise<Invitation[]> {\r\n  try {\r\n    console.log(\"Fetching invitations for user:\", userId);\r\n    console.log(\"DB object:\", db);\r\n    \r\n    if (!db) {\r\n      console.error(\"Database not initialized\");\r\n      return [];\r\n    }\r\n\r\n    if (!db.invitation) {\r\n      console.error(\"Invitation model not available\");\r\n      return [];\r\n    }\r\n\r\n    const invitations = await db.invitation.findMany({\r\n      where: { \r\n        invitedUserId: userId, \r\n        status: \"PENDING\" \r\n      },\r\n      include: { \r\n        junta: { \r\n          select: { \r\n            id: true,\r\n            name: true \r\n          } \r\n        },\r\n        inviter: { \r\n          select: { \r\n            id: true,\r\n            username: true \r\n          } \r\n        }\r\n      }\r\n    });\r\n    console.log(\"Fetched invitations:\", JSON.stringify(invitations, null, 2));\r\n    return invitations;\r\n  } catch (error) {\r\n    console.error(\"Error fetching invitations:\", error);\r\n    return [];\r\n  }\r\n}\r\n\r\nexport async function respondToInvitation(invitationId: string, accept: boolean) {\r\n  try {\r\n    console.log(\"Responding to invitation:\", { invitationId, accept });\r\n    \r\n    const invitation = await db.invitation.findUnique({\r\n      where: { id: invitationId },\r\n      include: { junta: { include: { members: true } }, invitedUser: true }\r\n    });\r\n\r\n    if (!invitation) {\r\n      return { success: false, message: \"Invitation not found\" };\r\n    }\r\n\r\n    if (invitation.status !== \"PENDING\") {\r\n      return { success: false, message: \"This invitation has already been processed\" };\r\n    }\r\n\r\n    const isAlreadyMember = invitation.junta.members.some(member => member.id === invitation.invitedUserId);\r\n    if (isAlreadyMember) {\r\n      await db.invitation.delete({ where: { id: invitationId } });\r\n      return { success: true, message: \"You are already a member of this junta\" };\r\n    }\r\n\r\n    if (accept) {\r\n      const result = await db.$transaction(async (tx) => {\r\n        await tx.invitation.update({\r\n          where: { id: invitationId },\r\n          data: { status: \"ACCEPTED\" }\r\n        });\r\n        \r\n        const updatedJunta = await tx.junta.update({\r\n          where: { id: invitation.juntaId },\r\n          data: { members: { connect: { id: invitation.invitedUserId } } },\r\n          include: { members: true, expenses: true }\r\n        });\r\n        \r\n        return updatedJunta;\r\n      });\r\n\r\n      console.log(\"Invitation accepted and user added to junta\");\r\n      return { \r\n        success: true, \r\n        message: \"Invitation accepted\", \r\n        juntaId: invitation.juntaId,\r\n        junta: result\r\n      };\r\n    } else {\r\n      await db.invitation.update({\r\n        where: { id: invitationId },\r\n        data: { status: \"REJECTED\" }\r\n      });\r\n      console.log(\"Invitation rejected\");\r\n      return { success: true, message: \"Invitation rejected\" };\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error responding to invitation:\", error);\r\n    return { success: false, message: \"Failed to respond to invitation. Please try again.\" };\r\n  }\r\n}", "import { db } from \"~/db.server\";\r\nimport { inviteUserToJunta } from \"~/utils/invitations\";\r\nimport { json } from \"@remix-run/node\";\r\nimport { ActionData, Junta, JuntaExpense } from \"../types\";\r\n\r\nexport async function createJunta(userId: string, juntaName: string) {\r\n  try {\r\n    const junta = await db.junta.create({\r\n      data: {\r\n        name: juntaName,\r\n        ownerId: userId,\r\n        members: {\r\n          connect: { id: userId }\r\n        }\r\n      },\r\n      include: {\r\n        members: true,\r\n        expenses: true\r\n      }\r\n    });\r\n\r\n    // Convertir las fechas a cadenas\r\n    const formattedJunta: Omit<Junta, \"expenses\"> & { \r\n      expenses: (Omit<JuntaExpense, \"createdAt\"> & { createdAt: string })[] \r\n    } = {\r\n      ...junta,\r\n      expenses: junta.expenses.map(expense => ({\r\n        ...expense,\r\n        createdAt: expense.createdAt.toISOString()\r\n      }))\r\n    };\r\n\r\n    return json<ActionData>({ success: true, junta: formattedJunta });\r\n  } catch (error) {\r\n    console.error(\"Error creating junta:\", error);\r\n    return json<ActionData>({ success: false, error: \"Failed to create junta\" }, { status: 500 });\r\n  }\r\n}\r\n\r\nexport async function clearJunta(juntaId: string) {\r\n  try {\r\n    await db.juntaExpense.deleteMany({\r\n      where: { juntaId }\r\n    });\r\n\r\n    return json<ActionData>({ success: true, message: \"Junta cleared successfully\" });\r\n  } catch (error) {\r\n    console.error(\"Error clearing junta:\", error);\r\n    return json<ActionData>({ success: false, error: \"Failed to clear junta\" }, { status: 500 });\r\n  }\r\n}\r\n\r\nexport async function inviteToJunta(juntaId: string, invitedUsername: string, inviterId: string) {\r\n  try {\r\n    const invitedUser = await db.user.findUnique({ where: { username: invitedUsername } });\r\n    if (!invitedUser) {\r\n      return json<ActionData>({ success: false, message: \"User not found\" });\r\n    }\r\n\r\n    const result = await inviteUserToJunta(juntaId, invitedUser.id, inviterId);\r\n    return json<ActionData>({ success: true, message: \"Invitation sent successfully\" });\r\n  } catch (error) {\r\n    console.error(\"Error inviting user:\", error);\r\n    return json<ActionData>({ success: false, error: \"An error occurred while sending the invitation\" });\r\n  }\r\n}\r\n\r\nexport const juntaActions = {\r\n  createJunta,\r\n  clearJunta,\r\n  inviteToJunta\r\n};\r\n", "import { useState, useEffect } from \"react\";\r\nimport { Invitation } from \"~/types\";\r\n\r\nexport function NotificationInbox({ \r\n  userId, \r\n  initialInvitations, \r\n  onInvitationResponse \r\n}: { \r\n  userId: string, \r\n  initialInvitations: Invitation[], \r\n  onInvitationResponse: (invitationId: string, accept: boolean) => Promise<{ success: boolean, message: string, junta?: any }>\r\n}) {\r\n  const [invitations, setInvitations] = useState<Invitation[]>(initialInvitations);\r\n  const [responseMessages, setResponseMessages] = useState<{[key: string]: string}>({});\r\n  const [isProcessing, setIsProcessing] = useState<{[key: string]: boolean}>({});\r\n\r\n  const handleInvitationResponse = async (invitationId: string, accept: boolean) => {\r\n    if (isProcessing[invitationId]) return;\r\n    \r\n    setIsProcessing(prev => ({...prev, [invitationId]: true}));\r\n    try {\r\n      const result = await onInvitationResponse(invitationId, accept);\r\n      setResponseMessages(prev => ({...prev, [invitationId]: result.message}));\r\n      if (result.success) {\r\n        setInvitations(prev => prev.filter(inv => inv.id !== invitationId));\r\n        // Aqu\u00ED podr\u00EDas actualizar el estado global de las juntas si es necesario\r\n        // Por ejemplo: updateJuntas(result.junta);\r\n      }\r\n      // Configurar un temporizador para limpiar el mensaje despu\u00E9s de 5 segundos\r\n      setTimeout(() => {\r\n        setResponseMessages(prev => {\r\n          const newMessages = {...prev};\r\n          delete newMessages[invitationId];\r\n          return newMessages;\r\n        });\r\n      }, 5000);\r\n    } catch (error) {\r\n      console.error(\"Error processing invitation response:\", error);\r\n      setResponseMessages(prev => ({...prev, [invitationId]: \"An error occurred. Please try again. (Maybe just need to reload the page and look for your groups)\"}));\r\n    } finally {\r\n      setIsProcessing(prev => ({...prev, [invitationId]: false}));\r\n    }\r\n  };\r\n\r\n  if (invitations.length === 0 && Object.keys(responseMessages).length === 0) {\r\n    return (\r\n      <p className=\"text-gray-500 italic\">\r\n        No pending invitations. Try refreshing the page to check for new invitations.\r\n      </p>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"space-y-4\">\r\n      <h2 className=\"text-xl font-semibold text-blue-600\">Invitations</h2>\r\n      {invitations.map((invitation) => (\r\n        <div key={invitation.id} className=\"bg-white shadow-md rounded-lg p-4 border border-gray-200\">\r\n          <p className=\"text-lg mb-2\">\r\n            <span className=\"font-semibold text-blue-500\">{invitation.inviter.username}</span> invited you to join \r\n            <span className=\"font-semibold text-green-500\"> {invitation.junta.name}</span>\r\n          </p>\r\n          <div className=\"flex space-x-2 mt-2\">\r\n            <button \r\n              onClick={() => handleInvitationResponse(invitation.id, true)}\r\n              className={`bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600 transition ${isProcessing[invitation.id] ? 'opacity-50 cursor-not-allowed' : ''}`}\r\n              disabled={isProcessing[invitation.id]}\r\n            >\r\n              {isProcessing[invitation.id] ? 'Processing...' : 'Accept'}\r\n            </button>\r\n            <button \r\n              onClick={() => handleInvitationResponse(invitation.id, false)}\r\n              className={`bg-red-500 text-white px-4 py-2 rounded hover:bg-red-600 transition ${isProcessing[invitation.id] ? 'opacity-50 cursor-not-allowed' : ''}`}\r\n              disabled={isProcessing[invitation.id]}\r\n            >\r\n              {isProcessing[invitation.id] ? 'Processing...' : 'Reject'}\r\n            </button>\r\n          </div>\r\n          {responseMessages[invitation.id] && (\r\n            <p className={`mt-2 text-sm ${isProcessing[invitation.id] ? 'text-yellow-600' : 'text-green-600'}`}>\r\n              {responseMessages[invitation.id]}\r\n            </p>\r\n          )}\r\n        </div>\r\n      ))}\r\n      {Object.entries(responseMessages).map(([invitationId, message]) => (\r\n        <div key={invitationId} className=\"bg-blue-100 border-l-4 border-blue-500 text-blue-700 p-4 mb-4\" role=\"alert\">\r\n          <p className=\"font-bold\">Response:</p>\r\n          <p>{message}</p>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}", "import { ActionFunction, json, LoaderFunction, redirect } from \"@remix-run/node\";\r\nimport { Form, useActionData, useLoaderData } from \"@remix-run/react\";\r\nimport { createUserSession, getUser, login } from \"~/auth.server\";\r\n\r\nexport const loader: LoaderFunction = async ({ request }) => {\r\n  const user = await getUser(request);\r\n  if (user) return redirect(\"/\");\r\n  return json({});\r\n};\r\n\r\nexport const action: ActionFunction = async ({ request }) => {\r\n  const form = await request.formData();\r\n  const username = form.get(\"username\");\r\n  const password = form.get(\"password\");\r\n  const redirectTo = form.get(\"redirectTo\") || \"/\";\r\n\r\n  if (\r\n    typeof username !== \"string\" ||\r\n    typeof password !== \"string\" ||\r\n    typeof redirectTo !== \"string\"\r\n  ) {\r\n    return json({ error: \"Invalid form data\" }, { status: 400 });\r\n  }\r\n\r\n  const user = await login({ username, password });\r\n  if (!user) {\r\n    return json({ error: \"Invalid username or password\" }, { status: 400 });\r\n  }\r\n\r\n  return createUserSession(user.id, redirectTo);\r\n};\r\n\r\nexport default function Login() {\r\n    const actionData = useActionData<typeof action>();\r\n  \r\n    return (\r\n      <div className=\"flex min-h-full flex-col justify-center\">\r\n        <div className=\"mx-auto w-full max-w-md px-8\">\r\n          <Form method=\"post\" className=\"space-y-6\">\r\n            <div>\r\n              <label htmlFor=\"username\" className=\"block text-sm font-medium text-gray-700\">\r\n                Username\r\n              </label>\r\n              <div className=\"mt-1\">\r\n                <input\r\n                  id=\"username\"\r\n                  required\r\n                  autoFocus={true}\r\n                  name=\"username\"\r\n                  type=\"text\"\r\n                  className=\"w-full rounded border border-gray-500 px-2 py-1 text-lg\"\r\n                />\r\n              </div>\r\n            </div>\r\n  \r\n            <div>\r\n              <label htmlFor=\"password\" className=\"block text-sm font-medium text-gray-700\">\r\n                Password\r\n              </label>\r\n              <div className=\"mt-1\">\r\n                <input\r\n                  id=\"password\"\r\n                  name=\"password\"\r\n                  type=\"password\"\r\n                  autoComplete=\"current-password\"\r\n                  required\r\n                  className=\"w-full rounded border border-gray-500 px-2 py-1 text-lg\"\r\n                />\r\n              </div>\r\n            </div>\r\n  \r\n            <button\r\n              type=\"submit\"\r\n              className=\"w-full rounded bg-blue-500 px-4 py-2 text-white hover:bg-blue-600 focus:bg-blue-400\"\r\n            >\r\n              Log in\r\n            </button>\r\n            <div className=\"flex items-center justify-between\">\r\n              <div className=\"flex items-center\">\r\n                <input\r\n                  id=\"remember\"\r\n                  name=\"remember\"\r\n                  type=\"checkbox\"\r\n                  className=\"h-4 w-4 rounded border-gray-300 text-blue-600 focus:ring-blue-500\"\r\n                />\r\n                <label htmlFor=\"remember\" className=\"ml-2 block text-sm text-gray-900\">\r\n                  Remember me\r\n                </label>\r\n              </div>\r\n              <div className=\"text-center text-sm text-gray-500\">\r\n                Don't have an account?{\" \"}\r\n                <a className=\"text-blue-500 underline\" href=\"/register\">\r\n                  Sign up\r\n                </a>\r\n              </div>\r\n            </div>\r\n          </Form>\r\n          {actionData?.error ? (\r\n            <div className=\"pt-1 text-red-700\" id=\"password-error\">\r\n              {actionData.error}\r\n            </div>\r\n          ) : null}\r\n        </div>\r\n      </div>\r\n    );\r\n  }", "export default {'entry':{'module':'/build/entry.client-4BIYH5ID.js','imports':['/build/_shared/chunk-O4BRYNJ4.js','/build/_shared/chunk-SNZIFTKA.js','/build/_shared/chunk-KHA4OLT4.js','/build/_shared/chunk-UWV35TSL.js','/build/_shared/chunk-U4FRFQSK.js','/build/_shared/chunk-XGOTYLZ5.js','/build/_shared/chunk-7M6SC7J5.js','/build/_shared/chunk-PNG5AS42.js']},'routes':{'root':{'id':'root','parentId':undefined,'path':'','index':undefined,'caseSensitive':undefined,'module':'/build/root-II2EJ4IF.js','imports':['/build/_shared/chunk-G7CHZRZX.js'],'hasAction':false,'hasLoader':true,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false},'routes/_index':{'id':'routes/_index','parentId':'root','path':undefined,'index':true,'caseSensitive':undefined,'module':'/build/routes/_index-GHR6GA6X.js','imports':['/build/_shared/chunk-E7TNPIXH.js','/build/_shared/chunk-IL7AJ3GD.js'],'hasAction':true,'hasLoader':true,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false},'routes/login':{'id':'routes/login','parentId':'root','path':'login','index':undefined,'caseSensitive':undefined,'module':'/build/routes/login-4DDJMFTN.js','imports':['/build/_shared/chunk-IL7AJ3GD.js'],'hasAction':true,'hasLoader':true,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false},'routes/logout':{'id':'routes/logout','parentId':'root','path':'logout','index':undefined,'caseSensitive':undefined,'module':'/build/routes/logout-GGSXPJWV.js','imports':undefined,'hasAction':true,'hasLoader':true,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false},'routes/minimizacion-transacciones':{'id':'routes/minimizacion-transacciones','parentId':'root','path':'minimizacion-transacciones','index':undefined,'caseSensitive':undefined,'module':'/build/routes/minimizacion-transacciones-5V32LAUF.js','imports':['/build/_shared/chunk-QGBU2JQV.js'],'hasAction':true,'hasLoader':false,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false},'routes/optimizacion-divisas':{'id':'routes/optimizacion-divisas','parentId':'root','path':'optimizacion-divisas','index':undefined,'caseSensitive':undefined,'module':'/build/routes/optimizacion-divisas-VST6HIL2.js','imports':['/build/_shared/chunk-QGBU2JQV.js'],'hasAction':true,'hasLoader':false,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false},'routes/register':{'id':'routes/register','parentId':'root','path':'register','index':undefined,'caseSensitive':undefined,'module':'/build/routes/register-SCMYMTNU.js','imports':['/build/_shared/chunk-E7TNPIXH.js','/build/_shared/chunk-IL7AJ3GD.js'],'hasAction':true,'hasLoader':true,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false}},'version':'2cc7df0a','hmr':{'runtime':'/build/_shared\\\\chunk-KHA4OLT4.js','timestamp':1726822804586},'url':'/build/manifest-2CC7DF0A.js'};", "\nimport * as entryServer from \"D:\\\\Scripts\\\\expense-splitter\\\\Expense-splitter\\\\app\\\\entry.server.tsx\";\nimport * as route0 from \"./root.tsx\";\nimport * as route1 from \"./routes/minimizacion-transacciones.tsx\";\nimport * as route2 from \"./routes/optimizacion-divisas.tsx\";\nimport * as route3 from \"./routes/register.tsx\";\nimport * as route4 from \"./routes/logout.tsx\";\nimport * as route5 from \"./routes/_index.tsx\";\nimport * as route6 from \"./routes/login.tsx\";\n  export const mode = \"development\";\n  export { default as assets } from \"@remix-run/dev/assets-manifest\";\n  export const assetsBuildDirectory = \"public\\\\build\";\n  export const future = {\"v3_fetcherPersist\":false,\"v3_relativeSplatPath\":false,\"v3_throwAbortReason\":false,\"unstable_singleFetch\":false,\"unstable_lazyRouteDiscovery\":false,\"unstable_optimizeDeps\":false};\n  export const publicPath = \"/build/\";\n  export const entry = { module: entryServer };\n  export const routes = {\n    \"root\": {\n      id: \"root\",\n      parentId: undefined,\n      path: \"\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route0\n    },\n  \"routes/minimizacion-transacciones\": {\n      id: \"routes/minimizacion-transacciones\",\n      parentId: \"root\",\n      path: \"minimizacion-transacciones\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route1\n    },\n  \"routes/optimizacion-divisas\": {\n      id: \"routes/optimizacion-divisas\",\n      parentId: \"root\",\n      path: \"optimizacion-divisas\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route2\n    },\n  \"routes/register\": {\n      id: \"routes/register\",\n      parentId: \"root\",\n      path: \"register\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route3\n    },\n  \"routes/logout\": {\n      id: \"routes/logout\",\n      parentId: \"root\",\n      path: \"logout\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route4\n    },\n  \"routes/_index\": {\n      id: \"routes/_index\",\n      parentId: \"root\",\n      path: undefined,\n      index: true,\n      caseSensitive: undefined,\n      module: route5\n    },\n  \"routes/login\": {\n      id: \"routes/login\",\n      parentId: \"root\",\n      path: \"login\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route6\n    }\n  };"],
  "mappings": "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",
  "names": ["resolve", "config", "fileURLToPath", "dirname", "resolve", "__filename", "__dirname", "jsxDEV", "jsxDEV", "json", "jsxDEV", "json", "action", "useState", "Form", "useActionData", "useSubmit", "json", "jsxDEV", "useState", "useActionData", "useSubmit", "Form", "action", "json", "action", "loader", "json", "redirect", "Form", "useActionData", "jsxDEV", "loader", "redirect", "json", "action", "useActionData", "Form", "action", "loader", "redirect", "action", "loader", "redirect", "action", "loader", "json", "useLoaderData", "useActionData", "Form", "useSubmit", "useState", "useEffect", "json", "json", "json", "useState", "jsxDEV", "Fragment", "jsxDEV", "loader", "json", "action", "useLoaderData", "useActionData", "useState", "useSubmit", "useEffect", "resolve", "Form", "action", "loader", "json", "redirect", "Form", "useActionData", "jsxDEV", "loader", "redirect", "json", "action", "useActionData", "Form"]
}
